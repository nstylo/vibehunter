{
  "version": 3,
  "sources": ["../../fastnoise-lite/FastNoiseLite.js"],
  "sourcesContent": ["// MIT License\n//\n// Copyright(c) 2023 Jordan Peck (jordan.me2@gmail.com)\n// Copyright(c) 2023 Contributors\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files(the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions :\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// .'',;:cldxkO00KKXXNNWWWNNXKOkxdollcc::::::;:::ccllloooolllllllllooollc:,'...        ...........',;cldxkO000Okxdlc::;;;,,;;;::cclllllll\n// ..',;:ldxO0KXXNNNNNNNNXXK0kxdolcc::::::;;;,,,,,,;;;;;;;;;;:::cclllllc:;'....       ...........',;:ldxO0KXXXK0Okxdolc::;;;;::cllodddddo\n// ...',:loxO0KXNNNNNXXKK0Okxdolc::;::::::::;;;,,'''''.....''',;:clllllc:;,'............''''''''',;:loxO0KXNNNNNXK0Okxdollccccllodxxxxxxd\n// ....';:ldkO0KXXXKK00Okxdolcc:;;;;;::cclllcc:;;,''..... ....',;clooddolcc:;;;;,,;;;;;::::;;;;;;:cloxk0KXNWWWWWWNXKK0Okxddoooddxxkkkkkxx\n// .....';:ldxkOOOOOkxxdolcc:;;;,,,;;:cllooooolcc:;'...      ..,:codxkkkxddooollloooooooollcc:::::clodkO0KXNWWWWWWNNXK00Okxxxxxxxxkkkkxxx\n// . ....';:cloddddo___________,,,,;;:clooddddoolc:,...      ..,:ldx__00OOOkkk___kkkkkkxxdollc::::cclodkO0KXXNNNNNNXXK0OOkxxxxxxxxxxxxddd\n// .......',;:cccc:|           |,,,;;:cclooddddoll:;'..     ..';cox|  \\KKK000|   |KK00OOkxdocc___;::clldxxkO0KKKKK00Okkxdddddddddddddddoo\n// .......'',,,,,''|   ________|',,;;::cclloooooolc:;'......___:ldk|   \\KK000|   |XKKK0Okxolc|   |;;::cclodxxkkkkxxdoolllcclllooodddooooo\n// ''......''''....|   |  ....'',,,,;;;::cclloooollc:;,''.'|   |oxk|    \\OOO0|   |KKK00Oxdoll|___|;;;;;::ccllllllcc::;;,,;;;:cclloooooooo\n// ;;,''.......... |   |_____',,;;;____:___cllo________.___|   |___|     \\xkk|   |KK_______ool___:::;________;;;_______...'',;;:ccclllloo\n// c:;,''......... |         |:::/     '   |lo/        |           |      \\dx|   |0/       \\d|   |cc/        |'/       \\......',,;;:ccllo\n// ol:;,'..........|    _____|ll/    __    |o/   ______|____    ___|   |   \\o|   |/   ___   \\|   |o/   ______|/   ___   \\ .......'',;:clo\n// dlc;,...........|   |::clooo|    /  |   |x\\___   \\KXKKK0|   |dol|   |\\   \\|   |   |   |   |   |d\\___   \\..|   |  /   /       ....',:cl\n// xoc;'...  .....'|   |llodddd|    \\__|   |_____\\   \\KKK0O|   |lc:|   |'\\       |   |___|   |   |_____\\   \\.|   |_/___/...      ...',;:c\n// dlc;'... ....',;|   |oddddddo\\          |          |Okkx|   |::;|   |..\\      |\\         /|   |          | \\         |...    ....',;:c\n// ol:,'.......',:c|___|xxxddollc\\_____,___|_________/ddoll|___|,,,|___|...\\_____|:\\ ______/l|___|_________/...\\________|'........',;::cc\n// c:;'.......';:codxxkkkkxxolc::;::clodxkOO0OOkkxdollc::;;,,''''',,,,''''''''''',,'''''',;:loxkkOOkxol:;,'''',,;:ccllcc:;,'''''',;::ccll\n// ;,'.......',:codxkOO0OOkxdlc:;,,;;:cldxxkkxxdolc:;;,,''.....'',;;:::;;,,,'''''........,;cldkO0KK0Okdoc::;;::cloodddoolc:;;;;;::ccllooo\n// .........',;:lodxOO0000Okdoc:,,',,;:clloddoolc:;,''.......'',;:clooollc:;;,,''.......',:ldkOKXNNXX0Oxdolllloddxxxxxxdolccccccllooodddd\n// .    .....';:cldxkO0000Okxol:;,''',,;::cccc:;,,'.......'',;:cldxxkkxxdolc:;;,'.......';coxOKXNWWWNXKOkxddddxxkkkkkkxdoollllooddxxxxkkk\n//       ....',;:codxkO000OOxdoc:;,''',,,;;;;,''.......',,;:clodkO00000Okxolc::;,,''..',;:ldxOKXNWWWNNK0OkkkkkkkkkkkxxddooooodxxkOOOOO000\n//       ....',;;clodxkkOOOkkdolc:;,,,,,,,,'..........,;:clodxkO0KKXKK0Okxdolcc::;;,,,;;:codkO0XXNNNNXKK0OOOOOkkkkxxdoollloodxkO0KKKXXXXX\n//\n// VERSION: 1.1.0\n// https://github.com/Auburn/FastNoiseLite\n// https://www.npmjs.com/package/fastnoise-lite\n//\n// Ported to JavaScript by snowfoxsh (Patrick U):\n// Discord: dev_storm (preferred) | Email: storm1surge@gmail.com | GitHub: snowfoxsh (https://github.com/snowfoxsh)\n//\n\n/**\n * @description FastNoise Lite is an extremely portable open source noise generation library with a large selection of noise algorithms\n * @author Jordan Peck, snowfoxsh\n * @version 1.1.0\n * @copyright Copyright(c) 2023 Jordan Peck, Contributors\n * @license MIT\n * @git https://github.com/Auburn/FastNoiseLite\n * @npm https://www.npmjs.com/package/fastnoise-lite\n * @example\n// Import from npm (if you used npm)\n\nimport FastNoiseLite from \"fastnoise-lite\";\n\n// Create and configure FastNoiseLite object\n\nlet noise = new FastNoiseLite();\nnoise.SetNoiseType(FastNoiseLite.NoiseType.OpenSimplex2);\n\n// Gather noise data\nlet noiseData = [];\n\nfor (let x = 0; x < 128; x++) {\n    noiseData[x] = [];\n\n    for (let y = 0; y < 128; y++) {        \n        noiseData[x][y] = noise.GetNoise(x,y);\n    }\n}\n\n// Do something with this data...\n */\nexport default class FastNoiseLite {\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{Cellular: string, OpenSimplex2: string, Value: string, ValueCubic: string, Perlin: string, OpenSimplex2S: string}>}\n     */\n    static NoiseType = Object.freeze({\n        OpenSimplex2: \"OpenSimplex2\",\n        OpenSimplex2S: \"OpenSimplex2S\",\n        Cellular: \"Cellular\",\n        Perlin: \"Perlin\",\n        ValueCubic: \"ValueCubic\",\n        Value: \"Value\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{ImproveXYPlanes: string, ImproveXZPlanes: string, None: string}>}\n     */\n    static RotationType3D = Object.freeze({\n        None: \"None\",\n        ImproveXYPlanes: \"ImproveXYPlanes\",\n        ImproveXZPlanes: \"ImproveXZPlanes\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{FBm: string, DomainWarpIndependent: string, PingPong: string, None: string, Ridged: string, DomainWarpProgressive: string}>}\n     */\n    static FractalType = Object.freeze({\n        None: \"None\",\n        FBm: \"FBm\",\n        Ridged: \"Ridged\",\n        PingPong: \"PingPong\",\n        DomainWarpProgressive: \"DomainWarpProgressive\",\n        DomainWarpIndependent: \"DomainWarpIndependent\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{EuclideanSq: string, Euclidean: string, Hybrid: string, Manhattan: string}>}\n     */\n    static CellularDistanceFunction = Object.freeze({\n        Euclidean: \"Euclidean\",\n        EuclideanSq: \"EuclideanSq\",\n        Manhattan: \"Manhattan\",\n        Hybrid: \"Hybrid\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{Distance2Sub: string, Distance2Mul: string, Distance2Add: string, Distance2Div: string, CellValue: string, Distance: string, Distance2: string}>}\n     */\n    static CellularReturnType = Object.freeze({\n        CellValue: \"CellValue\",\n        Distance: \"Distance\",\n        Distance2: \"Distance2\",\n        Distance2Add: \"Distance2Add\",\n        Distance2Sub: \"Distance2Sub\",\n        Distance2Mul: \"Distance2Mul\",\n        Distance2Div: \"Distance2Div\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{BasicGrid: string, OpenSimplex2Reduced: string, OpenSimplex2: string}>}\n     */\n    static DomainWarpType = Object.freeze({\n        OpenSimplex2: \"OpenSimplex2\",\n        OpenSimplex2Reduced: \"OpenSimplex2Reduced\",\n        BasicGrid: \"BasicGrid\",\n    });\n\n    /**\n     * @static\n     * @enum {string}\n     * @type {Readonly<{ImproveXYPlanes: string, ImproveXZPlanes: string, None: string, DefaultOpenSimplex2: string}>}\n     */\n    static TransformType3D = Object.freeze({\n        None: \"None\",\n        ImproveXYPlanes: \"ImproveXYPlanes\",\n        ImproveXZPlanes: \"ImproveXZPlanes\",\n        DefaultOpenSimplex2: \"DefaultOpenSimplex2\",\n    });\n\n    /* Private */\n    _Seed = 1337;\n    _Frequency = 0.01;\n    _NoiseType = FastNoiseLite.NoiseType.OpenSimplex2;\n    _RotationType3D = FastNoiseLite.RotationType3D.None;\n    _TransformType3D = FastNoiseLite.TransformType3D.DefaultOpenSimplex2;\n    _DomainWarpAmp = 1.0;\n\n    _FractalType = FastNoiseLite.FractalType.None;\n    _Octaves = 3;\n    _Lacunarity = 2.0;\n    _Gain = 0.5;\n    _WeightedStrength = 0.0;\n    _PingPongStrength = 2.0;\n\n    _FractalBounding = 1 / 1.75;\n\n    _CellularDistanceFunction = FastNoiseLite.CellularDistanceFunction.EuclideanSq;\n    _CellularReturnType = FastNoiseLite.CellularReturnType.Distance;\n    _CellularJitterModifier = 1.0;\n\n    _DomainWarpType = FastNoiseLite.DomainWarpType.OpenSimplex2;\n    _WarpTransformType3D = FastNoiseLite.TransformType3D.DefaultOpenSimplex2;\n\n    /**\n     * @description Create new FastNoiseLite object with optional seed\n     * @param {number} [seed]\n     * @constructor\n     */\n    constructor(seed) {\n        if (seed !== undefined) {\n            this._Seed = seed;\n        }\n    }\n\n    /**\n     * @description Sets seed used for all noise types\n     * @remarks Default: 1337\n     * @default 1337\n     * @param {number} seed\n     */\n    SetSeed(seed) {\n        this._Seed = seed;\n    }\n\n    /**\n     * @description Sets frequency for all noise types\n     * @remarks Default: 0.01\n     * @default 0.01\n     * @param {number} frequency\n     */\n    SetFrequency(frequency) {\n        this._Frequency = frequency;\n    }\n\n    /**\n     * @description Sets noise algorithm used for GetNoise(...)\n     * @remarks Default: OpenSimplex2\n     * @default FastNoiseLite.NoiseType.OpenSimplex2\n     * @param {FastNoiseLite.NoiseType} noiseType\n     */\n    SetNoiseType(noiseType) {\n        this._NoiseType = noiseType;\n        this._UpdateTransformType3D();\n    }\n\n    /**\n     * @description Sets domain rotation type for 3D Noise and 3D DomainWarp.\n     * @description Can aid in reducing directional artifacts when sampling a 2D plane in 3D\n     * @remarks Default: None\n     * @default FastNoiseLite.RotationType3D.None\n     * @param {FastNoiseLite.RotationType3D} rotationType3D\n     */\n    SetRotationType3D(rotationType3D) {\n        this._RotationType3D = rotationType3D;\n        this._UpdateTransformType3D();\n        this._UpdateWarpTransformType3D();\n    }\n\n    /**\n     * @description Sets method for combining octaves in all fractal noise types\n     * @remarks Default: None\n     * @default FastNoiseLite.FractalType.None\n     * @param {FastNoiseLite.FractalType} fractalType\n     */\n    SetFractalType(fractalType) {\n        this._FractalType = fractalType;\n    }\n\n    /**\n     * @description Sets octave count for all fractal noise types\n     * @remarks Default: 3\n     * @default 3\n     * @param {number} octaves\n     */\n    SetFractalOctaves(octaves) {\n        this._Octaves = octaves;\n        this._CalculateFractalBounding();\n    }\n\n    /**\n     * @description Sets octave lacunarity for all fractal noise types\n     * @remarks Default: 2.0\n     * @default 2.0\n     * @param {number} lacunarity\n     */\n    SetFractalLacunarity(lacunarity) {\n        this._Lacunarity = lacunarity;\n    }\n\n    /**\n     * @description Sets octave gain for all fractal noise types\n     * @remarks Default: 0.5\n     * @default 0.5\n     * @param {number} gain\n     */\n    SetFractalGain(gain) {\n        this._Gain = gain;\n        this._CalculateFractalBounding();\n    }\n\n    /**\n     * @description Sets octave weighting for all none DomainWarp fratal types\n     * @remarks Default: 0.0 | Keep between 0...1 to maintain -1...1 output bounding\n     * @default 0.5\n     * @param {number} weightedStrength\n     */\n    SetFractalWeightedStrength(weightedStrength) {\n        this._WeightedStrength = weightedStrength;\n    }\n\n    /**\n     * @description Sets strength of the fractal ping pong effect\n     * @remarks Default: 2.0\n     * @default 2.0\n     * @param {number} pingPongStrength\n     */\n    SetFractalPingPongStrength(pingPongStrength) {\n        this._PingPongStrength = pingPongStrength;\n    }\n\n    /**\n     * @description Sets distance function used in cellular noise calculations\n     * @remarks Default: EuclideanSq\n     * @default FastNoiseLite.CellularDistanceFunction.EuclideanSq\n     * @param {FastNoiseLite.CellularDistanceFunction} cellularDistanceFunction\n     */\n    SetCellularDistanceFunction(cellularDistanceFunction) {\n        this._CellularDistanceFunction = cellularDistanceFunction;\n    }\n\n    /**\n     * @description Sets return type from cellular noise calculations\n     * @remarks Default: Distance\n     * @default FastNoiseLite.CellularReturnType.Distance\n     * @param {FastNoiseLite.CellularReturnType} cellularReturnType\n     */\n    SetCellularReturnType(cellularReturnType) {\n        this._CellularReturnType = cellularReturnType;\n    }\n\n    /**\n     * @description Sets the maximum distance a cellular point can move from it's grid position\n     * @remarks Default: 1.0\n     * @default 1.0\n     * @param {number} cellularJitter\n     */\n    SetCellularJitter(cellularJitter) {\n        this._CellularJitterModifier = cellularJitter;\n    }\n\n    /**\n     * @description Sets the warp algorithm when using DomainWarp(...)\n     * @remarks Default: OpenSimplex2\n     * @default FastNoiseLite.DomainWarpType.OpenSimplex2\n     * @param {FastNoiseLite.DomainWarpType} domainWarpType\n     */\n    SetDomainWarpType(domainWarpType) {\n        this._DomainWarpType = domainWarpType;\n        this._UpdateWarpTransformType3D();\n    }\n\n    /**\n     * @description Sets the maximum warp distance from original position when using DomainWarp(...)\n     * @remarks Default: 1.0\n     * @default 1.0\n     * @param {number} domainWarpAmp\n     */\n    SetDomainWarpAmp(domainWarpAmp) {\n        this._DomainWarpAmp = domainWarpAmp;\n    }\n\n    /**\n     * @description 2D/3D noise at given position using current settings\n     * @param {number} x X coordinate\n     * @param {number} y Y coordinate\n     * @param {number} [z] Z coordinate\n     * @return {number} Noise output bounded between -1...1\n     */\n    GetNoise(x, y, z) {\n        /**\n         * @description 2D noise at given position using current settings\n         * @param {number} x\n         * @param {number} y\n         * @return {number} Noise output bounded between -1...1\n         */\n        let R2 = (x, y) => {\n            x *= this._Frequency;\n            y *= this._Frequency;\n\n            switch (this._NoiseType) {\n                case FastNoiseLite.NoiseType.OpenSimplex2:\n                case FastNoiseLite.NoiseType.OpenSimplex2S:\n                    const SQRT3 = 1.7320508075688772935274463415059;\n                    const F2 = 0.5 * (SQRT3 - 1);\n                    let t = (x + y) * F2;\n                    x += t;\n                    y += t;\n                    break;\n                default:\n                    break;\n            }\n\n            switch (this._FractalType) {\n                default:\n                    return this._GenNoiseSingleR2(this._Seed, x, y);\n                case FastNoiseLite.FractalType.FBm:\n                    return this._GenFractalFBmR2(x, y);\n                case FastNoiseLite.FractalType.Ridged:\n                    return this._GenFractalRidgedR2(x, y);\n                case FastNoiseLite.FractalType.PingPong:\n                    return this._GenFractalPingPongR2(x, y);\n            }\n        };\n\n        /**\n         * @description 3D noise at given position using current settings\n         * @param {number} x\n         * @param {number} y\n         * @param {number} z\n         * @return {number} Noise output bounded between -1...1\n         */\n        let R3 = (x, y, z) => {\n            x *= this._Frequency;\n            y *= this._Frequency;\n            z *= this._Frequency;\n\n            switch (this._TransformType3D) {\n                case FastNoiseLite.TransformType3D.ImproveXYPlanes: {\n                    let xy = x + y;\n                    let s2 = xy * -0.211324865405187;\n                    z *= 0.577350269189626;\n                    x += s2 - z;\n                    y += s2 - z;\n                    z += xy * 0.577350269189626;\n                    break;\n                }\n                case FastNoiseLite.TransformType3D.ImproveXZPlanes: {\n                    let xz = x + z;\n                    let s2 = xz * -0.211324865405187;\n                    y *= 0.577350269189626;\n                    x += s2 - y;\n                    z += s2 - y;\n                    y += xz * 0.577350269189626;\n                    break;\n                }\n                case FastNoiseLite.TransformType3D.DefaultOpenSimplex2:\n                    const R3 = 2.0 / 3.0;\n                    let r = (x + y + z) * R3;\n                    x = r - x;\n                    y = r - y;\n                    z = r - z;\n                    break;\n                default:\n                    break;\n            }\n\n            switch (this._FractalType) {\n                default:\n                    return this._GenNoiseSingleR3(this._Seed, x, y, z);\n                case FastNoiseLite.FractalType.FBm:\n                    return this._GenFractalFBmR3(x, y, z);\n                case FastNoiseLite.FractalType.Ridged:\n                    return this._GenFractalRidgedR3(x, y, z);\n                case FastNoiseLite.FractalType.PingPong:\n                    return this._GenFractalPingPongR3(x, y, z);\n            }\n        };\n\n        if (arguments.length === 2) {\n            return R2(x, y);\n        }\n\n        if (arguments.length === 3) {\n            return R3(x, y, z);\n        }\n    }\n\n    /**\n     * @description 2D/3D warps the input position using current domain warp settings\n     * @param {Vector2|Vector3} coord\n     */\n    DomainWrap(coord) {\n        switch (this._FractalType) {\n            default:\n                this._DomainWarpSingle(coord);\n                break;\n            case FastNoiseLite.FractalType.DomainWarpProgressive:\n                this._DomainWarpFractalProgressive(coord);\n                break;\n            case FastNoiseLite.FractalType.DomainWarpIndependent:\n                this._DomainWarpFractalIndependent(coord);\n                break;\n        }\n    }\n\n    // prettier-ignore\n    _Gradients2D = [\n        0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,\n        0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,\n        0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,\n        -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,\n        -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,\n        -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,\n        0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,\n        0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,\n        0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,\n        -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,\n        -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,\n        -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,\n        0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,\n        0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,\n        0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,\n        -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,\n        -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,\n        -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,\n        0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,\n        0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,\n        0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,\n        -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,\n        -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,\n        -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,\n        0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,\n        0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,\n        0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,\n        -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,\n        -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,\n        -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,\n        0.38268343236509, 0.923879532511287, 0.923879532511287, 0.38268343236509, 0.923879532511287, -0.38268343236509, 0.38268343236509, -0.923879532511287,\n        -0.38268343236509, -0.923879532511287, -0.923879532511287, -0.38268343236509, -0.923879532511287, 0.38268343236509, -0.38268343236509, 0.923879532511287,\n    ];\n\n    // prettier-ignore\n    _RandVecs2D = [\n        -0.2700222198, -0.9628540911, 0.3863092627, -0.9223693152, 0.04444859006, -0.999011673, -0.5992523158, -0.8005602176, -0.7819280288, 0.6233687174, 0.9464672271, 0.3227999196, -0.6514146797, -0.7587218957, 0.9378472289, 0.347048376,\n        -0.8497875957, -0.5271252623, -0.879042592, 0.4767432447, -0.892300288, -0.4514423508, -0.379844434, -0.9250503802, -0.9951650832, 0.0982163789, 0.7724397808, -0.6350880136, 0.7573283322, -0.6530343002, -0.9928004525, -0.119780055,\n        -0.0532665713, 0.9985803285, 0.9754253726, -0.2203300762, -0.7665018163, 0.6422421394, 0.991636706, 0.1290606184, -0.994696838, 0.1028503788, -0.5379205513, -0.84299554, 0.5022815471, -0.8647041387, 0.4559821461, -0.8899889226,\n        -0.8659131224, -0.5001944266, 0.0879458407, -0.9961252577, -0.5051684983, 0.8630207346, 0.7753185226, -0.6315704146, -0.6921944612, 0.7217110418, -0.5191659449, -0.8546734591, 0.8978622882, -0.4402764035, -0.1706774107, 0.9853269617,\n        -0.9353430106, -0.3537420705, -0.9992404798, 0.03896746794, -0.2882064021, -0.9575683108, -0.9663811329, 0.2571137995, -0.8759714238, -0.4823630009, -0.8303123018, -0.5572983775, 0.05110133755, -0.9986934731, -0.8558373281, -0.5172450752,\n        0.09887025282, 0.9951003332, 0.9189016087, 0.3944867976, -0.2439375892, -0.9697909324, -0.8121409387, -0.5834613061, -0.9910431363, 0.1335421355, 0.8492423985, -0.5280031709, -0.9717838994, -0.2358729591, 0.9949457207, 0.1004142068,\n        0.6241065508, -0.7813392434, 0.662910307, 0.7486988212, -0.7197418176, 0.6942418282, -0.8143370775, -0.5803922158, 0.104521054, -0.9945226741, -0.1065926113, -0.9943027784, 0.445799684, -0.8951327509, 0.105547406, 0.9944142724,\n        -0.992790267, 0.1198644477, -0.8334366408, 0.552615025, 0.9115561563, -0.4111755999, 0.8285544909, -0.5599084351, 0.7217097654, -0.6921957921, 0.4940492677, -0.8694339084, -0.3652321272, -0.9309164803, -0.9696606758, 0.2444548501,\n        0.08925509731, -0.996008799, 0.5354071276, -0.8445941083, -0.1053576186, 0.9944343981, -0.9890284586, 0.1477251101, 0.004856104961, 0.9999882091, 0.9885598478, 0.1508291331, 0.9286129562, -0.3710498316, -0.5832393863, -0.8123003252,\n        0.3015207509, 0.9534596146, -0.9575110528, 0.2883965738, 0.9715802154, -0.2367105511, 0.229981792, 0.9731949318, 0.955763816, -0.2941352207, 0.740956116, 0.6715534485, -0.9971513787, -0.07542630764, 0.6905710663, -0.7232645452,\n        -0.290713703, -0.9568100872, 0.5912777791, -0.8064679708, -0.9454592212, -0.325740481, 0.6664455681, 0.74555369, 0.6236134912, 0.7817328275, 0.9126993851, -0.4086316587, -0.8191762011, 0.5735419353, -0.8812745759, -0.4726046147,\n        0.9953313627, 0.09651672651, 0.9855650846, -0.1692969699, -0.8495980887, 0.5274306472, 0.6174853946, -0.7865823463, 0.8508156371, 0.52546432, 0.9985032451, -0.05469249926, 0.1971371563, -0.9803759185, 0.6607855748, -0.7505747292,\n        -0.03097494063, 0.9995201614, -0.6731660801, 0.739491331, -0.7195018362, -0.6944905383, 0.9727511689, 0.2318515979, 0.9997059088, -0.0242506907, 0.4421787429, -0.8969269532, 0.9981350961, -0.061043673, -0.9173660799, -0.3980445648,\n        -0.8150056635, -0.5794529907, -0.8789331304, 0.4769450202, 0.0158605829, 0.999874213, -0.8095464474, 0.5870558317, -0.9165898907, -0.3998286786, -0.8023542565, 0.5968480938, -0.5176737917, 0.8555780767, -0.8154407307, -0.5788405779,\n        0.4022010347, -0.9155513791, -0.9052556868, -0.4248672045, 0.7317445619, 0.6815789728, -0.5647632201, -0.8252529947, -0.8403276335, -0.5420788397, -0.9314281527, 0.363925262, 0.5238198472, 0.8518290719, 0.7432803869, -0.6689800195,\n        -0.985371561, -0.1704197369, 0.4601468731, 0.88784281, 0.825855404, 0.5638819483, 0.6182366099, 0.7859920446, 0.8331502863, -0.553046653, 0.1500307506, 0.9886813308, -0.662330369, -0.7492119075, -0.668598664, 0.743623444,\n        0.7025606278, 0.7116238924, -0.5419389763, -0.8404178401, -0.3388616456, 0.9408362159, 0.8331530315, 0.5530425174, -0.2989720662, -0.9542618632, 0.2638522993, 0.9645630949, 0.124108739, -0.9922686234, -0.7282649308, -0.6852956957,\n        0.6962500149, 0.7177993569, -0.9183535368, 0.3957610156, -0.6326102274, -0.7744703352, -0.9331891859, -0.359385508, -0.1153779357, -0.9933216659, 0.9514974788, -0.3076565421, -0.08987977445, -0.9959526224, 0.6678496916, 0.7442961705,\n        0.7952400393, -0.6062947138, -0.6462007402, -0.7631674805, -0.2733598753, 0.9619118351, 0.9669590226, -0.254931851, -0.9792894595, 0.2024651934, -0.5369502995, -0.8436138784, -0.270036471, -0.9628500944, -0.6400277131, 0.7683518247,\n        -0.7854537493, -0.6189203566, 0.06005905383, -0.9981948257, -0.02455770378, 0.9996984141, -0.65983623, 0.751409442, -0.6253894466, -0.7803127835, -0.6210408851, -0.7837781695, 0.8348888491, 0.5504185768, -0.1592275245, 0.9872419133,\n        0.8367622488, 0.5475663786, -0.8675753916, -0.4973056806, -0.2022662628, -0.9793305667, 0.9399189937, 0.3413975472, 0.9877404807, -0.1561049093, -0.9034455656, 0.4287028224, 0.1269804218, -0.9919052235, -0.3819600854, 0.924178821,\n        0.9754625894, 0.2201652486, -0.3204015856, -0.9472818081, -0.9874760884, 0.1577687387, 0.02535348474, -0.9996785487, 0.4835130794, -0.8753371362, -0.2850799925, -0.9585037287, -0.06805516006, -0.99768156, -0.7885244045, -0.6150034663,\n        0.3185392127, -0.9479096845, 0.8880043089, 0.4598351306, 0.6476921488, -0.7619021462, 0.9820241299, 0.1887554194, 0.9357275128, -0.3527237187, -0.8894895414, 0.4569555293, 0.7922791302, 0.6101588153, 0.7483818261, 0.6632681526,\n        -0.7288929755, -0.6846276581, 0.8729032783, -0.4878932944, 0.8288345784, 0.5594937369, 0.08074567077, 0.9967347374, 0.9799148216, -0.1994165048, -0.580730673, -0.8140957471, -0.4700049791, -0.8826637636, 0.2409492979, 0.9705377045,\n        0.9437816757, -0.3305694308, -0.8927998638, -0.4504535528, -0.8069622304, 0.5906030467, 0.06258973166, 0.9980393407, -0.9312597469, 0.3643559849, 0.5777449785, 0.8162173362, -0.3360095855, -0.941858566, 0.697932075, -0.7161639607,\n        -0.002008157227, -0.9999979837, -0.1827294312, -0.9831632392, -0.6523911722, 0.7578824173, -0.4302626911, -0.9027037258, -0.9985126289, -0.05452091251, -0.01028102172, -0.9999471489, -0.4946071129, 0.8691166802, -0.2999350194, 0.9539596344,\n        0.8165471961, 0.5772786819, 0.2697460475, 0.962931498, -0.7306287391, -0.6827749597, -0.7590952064, -0.6509796216, -0.907053853, 0.4210146171, -0.5104861064, -0.8598860013, 0.8613350597, 0.5080373165, 0.5007881595, -0.8655698812,\n        -0.654158152, 0.7563577938, -0.8382755311, -0.545246856, 0.6940070834, 0.7199681717, 0.06950936031, 0.9975812994, 0.1702942185, -0.9853932612, 0.2695973274, 0.9629731466, 0.5519612192, -0.8338697815, 0.225657487, -0.9742067022,\n        0.4215262855, -0.9068161835, 0.4881873305, -0.8727388672, -0.3683854996, -0.9296731273, -0.9825390578, 0.1860564427, 0.81256471, 0.5828709909, 0.3196460933, -0.9475370046, 0.9570913859, 0.2897862643, -0.6876655497, -0.7260276109,\n        -0.9988770922, -0.047376731, -0.1250179027, 0.992154486, -0.8280133617, 0.560708367, 0.9324863769, -0.3612051451, 0.6394653183, 0.7688199442, -0.01623847064, -0.9998681473, -0.9955014666, -0.09474613458, -0.81453315, 0.580117012,\n        0.4037327978, -0.9148769469, 0.9944263371, 0.1054336766, -0.1624711654, 0.9867132919, -0.9949487814, -0.100383875, -0.6995302564, 0.7146029809, 0.5263414922, -0.85027327, -0.5395221479, 0.841971408, 0.6579370318, 0.7530729462,\n        0.01426758847, -0.9998982128, -0.6734383991, 0.7392433447, 0.639412098, -0.7688642071, 0.9211571421, 0.3891908523, -0.146637214, -0.9891903394, -0.782318098, 0.6228791163, -0.5039610839, -0.8637263605, -0.7743120191, -0.6328039957,\n    ];\n\n    // prettier-ignore\n    _Gradients3D = [\n        0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0,\n        1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0,\n        1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0,\n        0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0,\n        1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0,\n        1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0,\n        0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0,\n        1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0,\n        1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0,\n        0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0,\n        1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0,\n        1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0,\n        0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0,\n        1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0,\n        1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0,\n        1, 1, 0, 0, 0, -1, 1, 0, -1, 1, 0, 0, 0, -1, -1, 0\n    ];\n\n    // prettier-ignore\n    _RandVecs3D = [\n        -0.7292736885, -0.6618439697, 0.1735581948, 0, 0.790292081, -0.5480887466, -0.2739291014, 0, 0.7217578935, 0.6226212466, -0.3023380997, 0, 0.565683137, -0.8208298145, -0.0790000257, 0, 0.760049034, -0.5555979497, -0.3370999617, 0, 0.3713945616, 0.5011264475, 0.7816254623, 0, -0.1277062463, -0.4254438999, -0.8959289049, 0, -0.2881560924, -0.5815838982, 0.7607405838, 0,\n        0.5849561111, -0.662820239, -0.4674352136, 0, 0.3307171178, 0.0391653737, 0.94291689, 0, 0.8712121778, -0.4113374369, -0.2679381538, 0, 0.580981015, 0.7021915846, 0.4115677815, 0, 0.503756873, 0.6330056931, -0.5878203852, 0, 0.4493712205, 0.601390195, 0.6606022552, 0, -0.6878403724, 0.09018890807, -0.7202371714, 0, -0.5958956522, -0.6469350577, 0.475797649, 0,\n        -0.5127052122, 0.1946921978, -0.8361987284, 0, -0.9911507142, -0.05410276466, -0.1212153153, 0, -0.2149721042, 0.9720882117, -0.09397607749, 0, -0.7518650936, -0.5428057603, 0.3742469607, 0, 0.5237068895, 0.8516377189, -0.02107817834, 0, 0.6333504779, 0.1926167129, -0.7495104896, 0, -0.06788241606, 0.3998305789, 0.9140719259, 0, -0.5538628599, -0.4729896695, -0.6852128902, 0,\n        -0.7261455366, -0.5911990757, 0.3509933228, 0, -0.9229274737, -0.1782808786, 0.3412049336, 0, -0.6968815002, 0.6511274338, 0.3006480328, 0, 0.9608044783, -0.2098363234, -0.1811724921, 0, 0.06817146062, -0.9743405129, 0.2145069156, 0, -0.3577285196, -0.6697087264, -0.6507845481, 0, -0.1868621131, 0.7648617052, -0.6164974636, 0, -0.6541697588, 0.3967914832, 0.6439087246, 0,\n        0.6993340405, -0.6164538506, 0.3618239211, 0, -0.1546665739, 0.6291283928, 0.7617583057, 0, -0.6841612949, -0.2580482182, -0.6821542638, 0, 0.5383980957, 0.4258654885, 0.7271630328, 0, -0.5026987823, -0.7939832935, -0.3418836993, 0, 0.3202971715, 0.2834415347, 0.9039195862, 0, 0.8683227101, -0.0003762656404, -0.4959995258, 0, 0.791120031, -0.08511045745, 0.6057105799, 0,\n        -0.04011016052, -0.4397248749, 0.8972364289, 0, 0.9145119872, 0.3579346169, -0.1885487608, 0, -0.9612039066, -0.2756484276, 0.01024666929, 0, 0.6510361721, -0.2877799159, -0.7023778346, 0, -0.2041786351, 0.7365237271, 0.644859585, 0, -0.7718263711, 0.3790626912, 0.5104855816, 0, -0.3060082741, -0.7692987727, 0.5608371729, 0, 0.454007341, -0.5024843065, 0.7357899537, 0,\n        0.4816795475, 0.6021208291, -0.6367380315, 0, 0.6961980369, -0.3222197429, 0.641469197, 0, -0.6532160499, -0.6781148932, 0.3368515753, 0, 0.5089301236, -0.6154662304, -0.6018234363, 0, -0.1635919754, -0.9133604627, -0.372840892, 0, 0.52408019, -0.8437664109, 0.1157505864, 0, 0.5902587356, 0.4983817807, -0.6349883666, 0, 0.5863227872, 0.494764745, 0.6414307729, 0,\n        0.6779335087, 0.2341345225, 0.6968408593, 0, 0.7177054546, -0.6858979348, 0.120178631, 0, -0.5328819713, -0.5205125012, 0.6671608058, 0, -0.8654874251, -0.0700727088, -0.4960053754, 0, -0.2861810166, 0.7952089234, 0.5345495242, 0, -0.04849529634, 0.9810836427, -0.1874115585, 0, -0.6358521667, 0.6058348682, 0.4781800233, 0, 0.6254794696, -0.2861619734, 0.7258696564, 0,\n        -0.2585259868, 0.5061949264, -0.8227581726, 0, 0.02136306781, 0.5064016808, -0.8620330371, 0, 0.200111773, 0.8599263484, 0.4695550591, 0, 0.4743561372, 0.6014985084, -0.6427953014, 0, 0.6622993731, -0.5202474575, -0.5391679918, 0, 0.08084972818, -0.6532720452, 0.7527940996, 0, -0.6893687501, 0.0592860349, 0.7219805347, 0, -0.1121887082, -0.9673185067, 0.2273952515, 0,\n        0.7344116094, 0.5979668656, -0.3210532909, 0, 0.5789393465, -0.2488849713, 0.7764570201, 0, 0.6988182827, 0.3557169806, -0.6205791146, 0, -0.8636845529, -0.2748771249, -0.4224826141, 0, -0.4247027957, -0.4640880967, 0.777335046, 0, 0.5257722489, -0.8427017621, 0.1158329937, 0, 0.9343830603, 0.316302472, -0.1639543925, 0, -0.1016836419, -0.8057303073, -0.5834887393, 0,\n        -0.6529238969, 0.50602126, -0.5635892736, 0, -0.2465286165, -0.9668205684, -0.06694497494, 0, -0.9776897119, -0.2099250524, -0.007368825344, 0, 0.7736893337, 0.5734244712, 0.2694238123, 0, -0.6095087895, 0.4995678998, 0.6155736747, 0, 0.5794535482, 0.7434546771, 0.3339292269, 0, -0.8226211154, 0.08142581855, 0.5627293636, 0, -0.510385483, 0.4703667658, 0.7199039967, 0,\n        -0.5764971849, -0.07231656274, -0.8138926898, 0, 0.7250628871, 0.3949971505, -0.5641463116, 0, -0.1525424005, 0.4860840828, -0.8604958341, 0, -0.5550976208, -0.4957820792, 0.667882296, 0, -0.1883614327, 0.9145869398, 0.357841725, 0, 0.7625556724, -0.5414408243, -0.3540489801, 0, -0.5870231946, -0.3226498013, -0.7424963803, 0, 0.3051124198, 0.2262544068, -0.9250488391, 0,\n        0.6379576059, 0.577242424, -0.5097070502, 0, -0.5966775796, 0.1454852398, -0.7891830656, 0, -0.658330573, 0.6555487542, -0.3699414651, 0, 0.7434892426, 0.2351084581, 0.6260573129, 0, 0.5562114096, 0.8264360377, -0.0873632843, 0, -0.3028940016, -0.8251527185, 0.4768419182, 0, 0.1129343818, -0.985888439, -0.1235710781, 0, 0.5937652891, -0.5896813806, 0.5474656618, 0,\n        0.6757964092, -0.5835758614, -0.4502648413, 0, 0.7242302609, -0.1152719764, 0.6798550586, 0, -0.9511914166, 0.0753623979, -0.2992580792, 0, 0.2539470961, -0.1886339355, 0.9486454084, 0, 0.571433621, -0.1679450851, -0.8032795685, 0, -0.06778234979, 0.3978269256, 0.9149531629, 0, 0.6074972649, 0.733060024, -0.3058922593, 0, -0.5435478392, 0.1675822484, 0.8224791405, 0,\n        -0.5876678086, -0.3380045064, -0.7351186982, 0, -0.7967562402, 0.04097822706, -0.6029098428, 0, -0.1996350917, 0.8706294745, 0.4496111079, 0, -0.02787660336, -0.9106232682, -0.4122962022, 0, -0.7797625996, -0.6257634692, 0.01975775581, 0, -0.5211232846, 0.7401644346, -0.4249554471, 0, 0.8575424857, 0.4053272873, -0.3167501783, 0, 0.1045223322, 0.8390195772, -0.5339674439, 0,\n        0.3501822831, 0.9242524096, -0.1520850155, 0, 0.1987849858, 0.07647613266, 0.9770547224, 0, 0.7845996363, 0.6066256811, -0.1280964233, 0, 0.09006737436, -0.9750989929, -0.2026569073, 0, -0.8274343547, -0.542299559, 0.1458203587, 0, -0.3485797732, -0.415802277, 0.840000362, 0, -0.2471778936, -0.7304819962, -0.6366310879, 0, -0.3700154943, 0.8577948156, 0.3567584454, 0,\n        0.5913394901, -0.548311967, -0.5913303597, 0, 0.1204873514, -0.7626472379, -0.6354935001, 0, 0.616959265, 0.03079647928, 0.7863922953, 0, 0.1258156836, -0.6640829889, -0.7369967419, 0, -0.6477565124, -0.1740147258, -0.7417077429, 0, 0.6217889313, -0.7804430448, -0.06547655076, 0, 0.6589943422, -0.6096987708, 0.4404473475, 0, -0.2689837504, -0.6732403169, -0.6887635427, 0,\n        -0.3849775103, 0.5676542638, 0.7277093879, 0, 0.5754444408, 0.8110471154, -0.1051963504, 0, 0.9141593684, 0.3832947817, 0.131900567, 0, -0.107925319, 0.9245493968, 0.3654593525, 0, 0.377977089, 0.3043148782, 0.8743716458, 0, -0.2142885215, -0.8259286236, 0.5214617324, 0, 0.5802544474, 0.4148098596, -0.7008834116, 0, -0.1982660881, 0.8567161266, -0.4761596756, 0,\n        -0.03381553704, 0.3773180787, -0.9254661404, 0, -0.6867922841, -0.6656597827, 0.2919133642, 0, 0.7731742607, -0.2875793547, -0.5652430251, 0, -0.09655941928, 0.9193708367, -0.3813575004, 0, 0.2715702457, -0.9577909544, -0.09426605581, 0, 0.2451015704, -0.6917998565, -0.6792188003, 0, 0.977700782, -0.1753855374, 0.1155036542, 0, -0.5224739938, 0.8521606816, 0.02903615945, 0,\n        -0.7734880599, -0.5261292347, 0.3534179531, 0, -0.7134492443, -0.269547243, 0.6467878011, 0, 0.1644037271, 0.5105846203, -0.8439637196, 0, 0.6494635788, 0.05585611296, 0.7583384168, 0, -0.4711970882, 0.5017280509, -0.7254255765, 0, -0.6335764307, -0.2381686273, -0.7361091029, 0, -0.9021533097, -0.270947803, -0.3357181763, 0, -0.3793711033, 0.872258117, 0.3086152025, 0,\n        -0.6855598966, -0.3250143309, 0.6514394162, 0, 0.2900942212, -0.7799057743, -0.5546100667, 0, -0.2098319339, 0.85037073, 0.4825351604, 0, -0.4592603758, 0.6598504336, -0.5947077538, 0, 0.8715945488, 0.09616365406, -0.4807031248, 0, -0.6776666319, 0.7118504878, -0.1844907016, 0, 0.7044377633, 0.312427597, 0.637304036, 0, -0.7052318886, -0.2401093292, -0.6670798253, 0,\n        0.081921007, -0.7207336136, -0.6883545647, 0, -0.6993680906, -0.5875763221, -0.4069869034, 0, -0.1281454481, 0.6419895885, 0.7559286424, 0, -0.6337388239, -0.6785471501, -0.3714146849, 0, 0.5565051903, -0.2168887573, -0.8020356851, 0, -0.5791554484, 0.7244372011, -0.3738578718, 0, 0.1175779076, -0.7096451073, 0.6946792478, 0, -0.6134619607, 0.1323631078, 0.7785527795, 0,\n        0.6984635305, -0.02980516237, -0.715024719, 0, 0.8318082963, -0.3930171956, 0.3919597455, 0, 0.1469576422, 0.05541651717, -0.9875892167, 0, 0.708868575, -0.2690503865, 0.6520101478, 0, 0.2726053183, 0.67369766, -0.68688995, 0, -0.6591295371, 0.3035458599, -0.6880466294, 0, 0.4815131379, -0.7528270071, 0.4487723203, 0, 0.9430009463, 0.1675647412, -0.2875261255, 0,\n        0.434802957, 0.7695304522, -0.4677277752, 0, 0.3931996188, 0.594473625, 0.7014236729, 0, 0.7254336655, -0.603925654, 0.3301814672, 0, 0.7590235227, -0.6506083235, 0.02433313207, 0, -0.8552768592, -0.3430042733, 0.3883935666, 0, -0.6139746835, 0.6981725247, 0.3682257648, 0, -0.7465905486, -0.5752009504, 0.3342849376, 0, 0.5730065677, 0.810555537, -0.1210916791, 0,\n        -0.9225877367, -0.3475211012, -0.167514036, 0, -0.7105816789, -0.4719692027, -0.5218416899, 0, -0.08564609717, 0.3583001386, 0.929669703, 0, -0.8279697606, -0.2043157126, 0.5222271202, 0, 0.427944023, 0.278165994, 0.8599346446, 0, 0.5399079671, -0.7857120652, -0.3019204161, 0, 0.5678404253, -0.5495413974, -0.6128307303, 0, -0.9896071041, 0.1365639107, -0.04503418428, 0,\n        -0.6154342638, -0.6440875597, 0.4543037336, 0, 0.1074204368, -0.7946340692, 0.5975094525, 0, -0.3595449969, -0.8885529948, 0.28495784, 0, -0.2180405296, 0.1529888965, 0.9638738118, 0, -0.7277432317, -0.6164050508, -0.3007234646, 0, 0.7249729114, -0.00669719484, 0.6887448187, 0, -0.5553659455, -0.5336586252, 0.6377908264, 0, 0.5137558015, 0.7976208196, -0.3160000073, 0,\n        -0.3794024848, 0.9245608561, -0.03522751494, 0, 0.8229248658, 0.2745365933, -0.4974176556, 0, -0.5404114394, 0.6091141441, 0.5804613989, 0, 0.8036581901, -0.2703029469, 0.5301601931, 0, 0.6044318879, 0.6832968393, 0.4095943388, 0, 0.06389988817, 0.9658208605, -0.2512108074, 0, 0.1087113286, 0.7402471173, -0.6634877936, 0, -0.713427712, -0.6926784018, 0.1059128479, 0,\n        0.6458897819, -0.5724548511, -0.5050958653, 0, -0.6553931414, 0.7381471625, 0.159995615, 0, 0.3910961323, 0.9188871375, -0.05186755998, 0, -0.4879022471, -0.5904376907, 0.6429111375, 0, 0.6014790094, 0.7707441366, -0.2101820095, 0, -0.5677173047, 0.7511360995, 0.3368851762, 0, 0.7858573506, 0.226674665, 0.5753666838, 0, -0.4520345543, -0.604222686, -0.6561857263, 0,\n        0.002272116345, 0.4132844051, -0.9105991643, 0, -0.5815751419, -0.5162925989, 0.6286591339, 0, -0.03703704785, 0.8273785755, 0.5604221175, 0, -0.5119692504, 0.7953543429, -0.3244980058, 0, -0.2682417366, -0.9572290247, -0.1084387619, 0, -0.2322482736, -0.9679131102, -0.09594243324, 0, 0.3554328906, -0.8881505545, 0.2913006227, 0, 0.7346520519, -0.4371373164, 0.5188422971, 0,\n        0.9985120116, 0.04659011161, -0.02833944577, 0, -0.3727687496, -0.9082481361, 0.1900757285, 0, 0.91737377, -0.3483642108, 0.1925298489, 0, 0.2714911074, 0.4147529736, -0.8684886582, 0, 0.5131763485, -0.7116334161, 0.4798207128, 0, -0.8737353606, 0.18886992, -0.4482350644, 0, 0.8460043821, -0.3725217914, 0.3814499973, 0, 0.8978727456, -0.1780209141, -0.4026575304, 0,\n        0.2178065647, -0.9698322841, -0.1094789531, 0, -0.1518031304, -0.7788918132, -0.6085091231, 0, -0.2600384876, -0.4755398075, -0.8403819825, 0, 0.572313509, -0.7474340931, -0.3373418503, 0, -0.7174141009, 0.1699017182, -0.6756111411, 0, -0.684180784, 0.02145707593, -0.7289967412, 0, -0.2007447902, 0.06555605789, -0.9774476623, 0, -0.1148803697, -0.8044887315, 0.5827524187, 0,\n        -0.7870349638, 0.03447489231, 0.6159443543, 0, -0.2015596421, 0.6859872284, 0.6991389226, 0, -0.08581082512, -0.10920836, -0.9903080513, 0, 0.5532693395, 0.7325250401, -0.396610771, 0, -0.1842489331, -0.9777375055, -0.1004076743, 0, 0.0775473789, -0.9111505856, 0.4047110257, 0, 0.1399838409, 0.7601631212, -0.6344734459, 0, 0.4484419361, -0.845289248, 0.2904925424, 0\n    ];\n\n    _PrimeX = 501125321;\n    _PrimeY = 1136930381;\n    _PrimeZ = 1720413743;\n\n    /**\n     * @private\n     * @param {number} a\n     * @param {number} b\n     * @param {number} t\n     * @returns {number}\n     */\n    static _Lerp(a, b, t) {\n        return a + t * (b - a);\n    }\n\n    /**\n     * @private\n     * @param {number} t\n     * @returns {number}\n     */\n    static _InterpHermite(t) {\n        return t * t * (3 - 2 * t);\n    }\n\n    /**\n     * @private\n     * @param t\n     * @returns {number}\n     */\n    static _InterpQuintic(t) {\n        return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n\n    /**\n     * @private\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @param {number} d\n     * @param {number} t\n     * @returns {number}\n     */\n    static _CubicLerp(a, b, c, d, t) {\n        let p = d - c - (a - b);\n        return t * t * t * p + t * t * (a - b - p) + t * (c - a) + b;\n    }\n\n    /**\n     * @private\n     * @param {number} t\n     * @returns {number}\n     */\n    static _PingPong(t) {\n        t -= Math.trunc(t * 0.5) * 2;\n        return t < 1 ? t : 2 - t;\n    }\n\n    /**\n     * @private\n     */\n    _CalculateFractalBounding() {\n        let gain = Math.abs(this._Gain);\n        let amp = gain;\n        let ampFractal = 1.0;\n        for (let i = 1; i < this._Octaves; i++) {\n            ampFractal += amp;\n            amp *= gain;\n        }\n        this._FractalBounding = 1 / ampFractal;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @returns {number}\n     */\n    _HashR2(seed, xPrimed, yPrimed) {\n        let hash = seed ^ xPrimed ^ yPrimed;\n        hash = Math.imul(hash, 0x27d4eb2d);\n        return hash;\n    }\n\n    /**\n     *\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @param {number} zPrimed\n     * @returns {number}\n     */\n    _HashR3(seed, xPrimed, yPrimed, zPrimed){\n        let hash = seed ^ xPrimed ^ yPrimed ^ zPrimed;\n        hash = Math.imul(hash, 0x27d4eb2d);\n        return hash;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @returns {number}\n     */\n    _ValCoordR2(seed, xPrimed, yPrimed) {\n        let hash = this._HashR2(seed, xPrimed, yPrimed);\n\n        hash = Math.imul(hash, hash);\n        hash ^= hash << 19;\n        return hash * (1 / 2147483648.0);\n    }\n\n    /**\n     *\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @param {number} zPrimed\n     * @returns {number}\n     */\n    _ValCoordR3(seed, xPrimed, yPrimed, zPrimed){\n        let hash = this._HashR3(seed, xPrimed, yPrimed, zPrimed);\n\n        hash = Math.imul(hash, hash);\n        hash ^= hash << 19;\n        return hash * (1 / 2147483648.0);\n    }\n\n    /**\n     *\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @param {number} xd\n     * @param {number} yd\n     * @returns {number}\n     */\n    _GradCoordR2(seed, xPrimed, yPrimed, xd, yd) {\n        let hash = this._HashR2(seed, xPrimed, yPrimed);\n        hash ^= hash >> 15;\n        hash &= 127 << 1;\n\n        let xg = this._Gradients2D[hash];\n        let yg = this._Gradients2D[hash | 1];\n\n        return xd * xg + yd * yg;\n    }\n\n    /**\n     *\n     * @param {number} seed\n     * @param {number} xPrimed\n     * @param {number} yPrimed\n     * @param {number} zPrimed\n     * @param {number} xd\n     * @param {number} yd\n     * @param {number} zd\n     * @returns {number}\n     */\n    _GradCoordR3(seed, xPrimed, yPrimed, zPrimed, xd, yd, zd) {\n        let hash = this._HashR3(seed, xPrimed, yPrimed, zPrimed);\n        hash ^= hash >> 15;\n        hash &= 63 << 2;\n\n        let xg = this._Gradients3D[hash];\n        let yg = this._Gradients3D[hash | 1];\n        let zg = this._Gradients3D[hash | 2];\n\n        return xd * xg + yd * yg + zd * zg;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _GenNoiseSingleR2(seed, x, y) {\n        switch (this._NoiseType) {\n            case FastNoiseLite.NoiseType.OpenSimplex2:\n                return this._SingleOpenSimplex2R2(seed, x, y);\n            case FastNoiseLite.NoiseType.OpenSimplex2S:\n                return this._SingleOpenSimplex2SR2(seed, x, y);\n            case FastNoiseLite.NoiseType.Cellular:\n                return this._SingleCellularR2(seed, x, y);\n            case FastNoiseLite.NoiseType.Perlin:\n                return this._SinglePerlinR2(seed, x, y);\n            case FastNoiseLite.NoiseType.ValueCubic:\n                return this._SingleValueCubicR2(seed, x, y);\n            case FastNoiseLite.NoiseType.Value:\n                return this._SingleValueR2(seed, x, y);\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _GenNoiseSingleR3(seed, x, y, z){\n        switch (this._NoiseType) {\n            case FastNoiseLite.NoiseType.OpenSimplex2:\n                return this._SingleOpenSimplex2R3(seed, x, y, z);\n            case FastNoiseLite.NoiseType.OpenSimplex2S:\n                return this._SingleOpenSimplex2SR3(seed, x, y, z);\n            case FastNoiseLite.NoiseType.Cellular:\n                return this._SingleCellularR3(seed, x, y, z);\n            case FastNoiseLite.NoiseType.Perlin:\n                return this._SinglePerlinR3(seed, x, y, z);\n            case FastNoiseLite.NoiseType.ValueCubic:\n                return this._SingleValueCubicR3(seed, x, y, z);\n            case FastNoiseLite.NoiseType.Value:\n                return this._SingleValueR3(seed, x, y, z);\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * @private\n     */\n    _UpdateTransformType3D() {\n        switch (this._RotationType3D) {\n            case FastNoiseLite.RotationType3D.ImproveXYPlanes:\n                this._TransformType3D = FastNoiseLite.TransformType3D.ImproveXYPlanes;\n                break;\n            case FastNoiseLite.RotationType3D.ImproveXZPlanes:\n                this._TransformType3D = FastNoiseLite.TransformType3D.ImproveXZPlanes;\n                break;\n            default:\n                switch (this._NoiseType) {\n                    case FastNoiseLite.NoiseType.OpenSimplex2:\n                    case FastNoiseLite.NoiseType.OpenSimplex2S:\n                        this._TransformType3D = FastNoiseLite.TransformType3D.DefaultOpenSimplex2;\n                        break;\n                    default:\n                        this._TransformType3D = FastNoiseLite.TransformType3D.None;\n                        break;\n                }\n                break;\n        }\n    }\n\n    /**\n     * @private\n     */\n    _UpdateWarpTransformType3D() {\n        switch (this._RotationType3D) {\n            case FastNoiseLite.RotationType3D.ImproveXYPlanes:\n                this._WarpTransformType3D = FastNoiseLite.TransformType3D.ImproveXYPlanes;\n                break;\n            case FastNoiseLite.RotationType3D.ImproveXZPlanes:\n                this._WarpTransformType3D = FastNoiseLite.TransformType3D.ImproveXZPlanes;\n                break;\n            default:\n                switch (this._DomainWarpType) {\n                    case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                    case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                        this._WarpTransformType3D = FastNoiseLite.TransformType3D.DefaultOpenSimplex2;\n                        break;\n                    default:\n                        this._WarpTransformType3D = FastNoiseLite.TransformType3D.None;\n                        break;\n                }\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _GenFractalFBmR2(x,y) {\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = this._GenNoiseSingleR2(seed++, x, y);\n            sum += noise * amp;\n            amp *= FastNoiseLite._Lerp(1.0, Math.min(noise + 1, 2) * 0.5, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _GenFractalFBmR3(x,y,z){\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = this._GenNoiseSingleR3(seed++, x, y, z);\n            sum += noise * amp;\n            amp *= FastNoiseLite._Lerp(1.0, (noise + 1) * 0.5, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            z *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _GenFractalRidgedR2(x,y) {\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = Math.abs(this._GenNoiseSingleR2(seed++, x, y));\n            sum += (noise * -2 + 1) * amp;\n            amp *= FastNoiseLite._Lerp(1.0, 1 - noise, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _GenFractalRidgedR3(x,y,z){\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = Math.abs(this._GenNoiseSingleR3(seed++, x, y, z));\n            sum += (noise * -2 + 1) * amp;\n            amp *= FastNoiseLite._Lerp(1.0, 1 - noise, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            z *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _GenFractalPingPongR2(x,y) {\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = FastNoiseLite._PingPong(\n                (this._GenNoiseSingleR2(seed++, x, y) + 1) * this._PingPongStrength\n            );\n            sum += (noise - 0.5) * 2 * amp;\n            amp *= FastNoiseLite._Lerp(1.0, noise, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _GenFractalPingPongR3(x,y,z){\n        let seed = this._Seed;\n        let sum = 0;\n        let amp = this._FractalBounding;\n\n        for (let i = 0; i < this._Octaves; i++) {\n            let noise = FastNoiseLite._PingPong(\n                (this._GenNoiseSingleR3(seed++, x, y, z) + 1) * this._PingPongStrength\n            );\n            sum += (noise - 0.5) * 2 * amp;\n            amp *= FastNoiseLite._Lerp(1.0, noise, this._WeightedStrength);\n\n            x *= this._Lacunarity;\n            y *= this._Lacunarity;\n            z *= this._Lacunarity;\n            amp *= this._Gain;\n        }\n        return sum;\n    }\n\n    /**\n     *\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SingleOpenSimplex2R2(seed,x,y) {\n        const SQRT3 = 1.7320508075688772935274463415059;\n        const G2 = (3 - SQRT3) / 6;\n\n        let i = Math.floor(x);\n        let j = Math.floor(y);\n        let xi = x - i;\n        let yi = y - j;\n\n        let t = (xi + yi) * G2;\n        let x0 = xi - t;\n        let y0 = yi - t;\n\n        i = Math.imul(i, this._PrimeX);\n        j = Math.imul(j, this._PrimeY);\n\n        let n0, n1, n2;\n\n        let a = 0.5 - x0 * x0 - y0 * y0;\n\n        if (a <= 0) {\n            n0 = 0;\n        } else {\n            n0 = a * a * (a * a) * this._GradCoordR2(seed, i, j, x0, y0);\n        }\n\n        let c = 2 * (1 - 2 * G2) * (1 / G2 - 2) * t + (-2 * (1 - 2 * G2) * (1 - 2 * G2) + a);\n\n        if (c <= 0) {\n            n2 = 0;\n        } else {\n            let x2 = x0 + (2 * G2 - 1);\n            let y2 = y0 + (2 * G2 - 1);\n            n2 = c * c * (c * c) * this._GradCoordR2(seed, i + this._PrimeX, j + this._PrimeY, x2, y2);\n        }\n\n        if (y0 > x0) {\n            let x1 = x0 + G2;\n            let y1 = y0 + (G2 - 1);\n            let b = 0.5 - x1 * x1 - y1 * y1;\n            if (b <= 0) {\n                n1 = 0;\n            } else {\n                n1 = b * b * (b * b) * this._GradCoordR2(seed, i, j + this._PrimeY, x1, y1);\n            }\n        } else {\n            let x1 = x0 + (G2 - 1);\n            let y1 = y0 + G2;\n            let b = 0.5 - x1 * x1 - y1 * y1;\n            if (b <= 0) {\n                n1 = 0;\n            } else {\n                n1 = b * b * (b * b) * this._GradCoordR2(seed, i + this._PrimeX, j, x1, y1);\n            }\n        }\n        return (n0 + n1 + n2) * 99.83685446303647;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SingleOpenSimplex2R3(seed,x,y,z){\n        let i = Math.round(x);\n        let j = Math.round(y);\n        let k = Math.round(z);\n        let x0 = x - i;\n        let y0 = y - j;\n        let z0 = z - k;\n\n        let yNSign = Math.trunc((-1.0 - y0) | 1);\n        let xNSign = Math.trunc((-1.0 - x0) | 1);\n        let zNSign = Math.trunc((-1.0 - z0) | 1);\n\n        let ax0 = xNSign * -x0;\n        let ay0 = yNSign * -y0;\n        let az0 = zNSign * -z0;\n        i = Math.imul(i, this._PrimeX);\n        j = Math.imul(j, this._PrimeY);\n        k = Math.imul(k, this._PrimeZ);\n\n        let value = 0;\n        let a = 0.6 - x0 * x0 - (y0 * y0 + z0 * z0);\n\n        for (let l = 0; ; l++) {\n            if (a > 0) {\n                value += a * a * (a * a) * this._GradCoordR3(seed, i, j, k, x0, y0, z0);\n            }\n\n            if (ax0 >= ay0 && ax0 >= az0) {\n                let b = a + ax0 + ax0;\n                if (b > 1) {\n                    b -= 1;\n                    value +=\n                        b *\n                        b *\n                        (b * b) *\n                        this._GradCoordR3(\n                            seed,\n                            i - xNSign * this._PrimeX,\n                            j,\n                            k,\n                            x0 + xNSign,\n                            y0,\n                            z0\n                        );\n                }\n            } else if (ay0 > ax0 && ay0 >= az0) {\n                let b = a + ay0 + ay0;\n                if (b > 1) {\n                    b -= 1;\n                    value +=\n                        b *\n                        b *\n                        (b * b) *\n                        this._GradCoordR3(\n                            seed,\n                            i,\n                            j - yNSign * this._PrimeY,\n                            k,\n                            x0,\n                            y0 + yNSign,\n                            z0\n                        );\n                }\n            } else {\n                let b = a + az0 + az0;\n                if (b > 1) {\n                    b -= 1;\n                    value +=\n                        b *\n                        b *\n                        (b * b) *\n                        this._GradCoordR3(\n                            seed,\n                            i,\n                            j,\n                            k - zNSign * this._PrimeZ,\n                            x0,\n                            y0,\n                            z0 + zNSign\n                        );\n                }\n            }\n\n            if (l === 1) {\n                break;\n            }\n\n            ax0 = 0.5 - ax0;\n            ay0 = 0.5 - ay0;\n            az0 = 0.5 - az0;\n\n            x0 = xNSign * ax0;\n            y0 = yNSign * ay0;\n            z0 = zNSign * az0;\n\n            a += 0.75 - ax0 - (ay0 + az0);\n\n            i += (xNSign >> 1) & this._PrimeX;\n            j += (yNSign >> 1) & this._PrimeY;\n            k += (zNSign >> 1) & this._PrimeZ;\n\n            xNSign = -xNSign;\n            yNSign = -yNSign;\n            zNSign = -zNSign;\n\n            seed = ~seed;\n        }\n        return value * 32.69428253173828125;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SingleOpenSimplex2SR2(seed,x,y) {\n        // 2D OpenSimplex2S case is a modified 2D simplex noise.\n\n        const SQRT3 = 1.7320508075688772935274463415059;\n        const G2 = (3 - SQRT3) / 6;\n\n        /*\n         * --- Skew moved to TransformNoiseCoordinate method ---\n         * final FNLfloat F2 = 0.5f * (SQRT3 - 1);\n         * FNLfloat s = (x + y) * F2;\n         * x += s; y += s;\n         */\n\n        let i = Math.floor(x);\n        let j = Math.floor(y);\n        let xi = x - i;\n        let yi = y - j;\n\n        i = Math.imul(i, this._PrimeX);\n        j = Math.imul(j, this._PrimeY);\n        let i1 = i + this._PrimeX;\n        let j1 = j + this._PrimeY;\n\n        let t = (xi + yi) * G2;\n        let x0 = xi - t;\n        let y0 = yi - t;\n\n        let a0 = 2.0 / 3.0 - x0 * x0 - y0 * y0;\n        let value = a0 * a0 * (a0 * a0) * this._GradCoordR2(seed, i, j, x0, y0);\n        let a1 = 2 * (1 - 2 * G2) * (1 / G2 - 2) * t + (-2 * (1 - 2 * G2) * (1 - 2 * G2) + a0);\n        let x1 = x0 - (1 - 2 * G2);\n        let y1 = y0 - (1 - 2 * G2);\n        value += a1 * a1 * (a1 * a1) * this._GradCoordR2(seed, i1, j1, x1, y1);\n\n        // Nested conditionals were faster than compact bit logic/arithmetic.\n        let xmyi = xi - yi;\n        if (t > G2) {\n            if (xi + xmyi > 1) {\n                let x2 = x0 + (3 * G2 - 2);\n                let y2 = y0 + (3 * G2 - 1);\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 *\n                        a2 *\n                        (a2 * a2) *\n                        this._GradCoordR2(seed, i + (this._PrimeX << 1), j + this._PrimeY, x2, y2);\n                }\n            } else {\n                let x2 = x0 + G2;\n                let y2 = y0 + (G2 - 1);\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 * a2 * (a2 * a2) * this._GradCoordR2(seed, i, j + this._PrimeY, x2, y2);\n                }\n            }\n\n            if (yi - xmyi > 1) {\n                let x3 = x0 + (3 * G2 - 1);\n                let y3 = y0 + (3 * G2 - 2);\n                let a3 = 2.0 / 3.0 - x3 * x3 - y3 * y3;\n                if (a3 > 0) {\n                    value +=\n                        a3 *\n                        a3 *\n                        (a3 * a3) *\n                        this._GradCoordR2(seed, i + this._PrimeX, j + (this._PrimeY << 1), x3, y3);\n                }\n            } else {\n                let x3 = x0 + (G2 - 1);\n                let y3 = y0 + G2;\n                let a3 = 2.0 / 3.0 - x3 * x3 - y3 * y3;\n                if (a3 > 0) {\n                    value +=\n                        a3 * a3 * (a3 * a3) * this._GradCoordR2(seed, i + this._PrimeX, j, x3, y3);\n                }\n            }\n        } else {\n            if (xi + xmyi < 0) {\n                let x2 = x0 + (1 - G2);\n                let y2 = y0 - G2;\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 * a2 * (a2 * a2) * this._GradCoordR2(seed, i - this._PrimeX, j, x2, y2);\n                }\n            } else {\n                let x2 = x0 + (G2 - 1);\n                let y2 = y0 + G2;\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 * a2 * (a2 * a2) * this._GradCoordR2(seed, i + this._PrimeX, j, x2, y2);\n                }\n            }\n\n            if (yi < xmyi) {\n                let x2 = x0 - G2;\n                let y2 = y0 - (G2 - 1);\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 * a2 * (a2 * a2) * this._GradCoordR2(seed, i, j - this._PrimeY, x2, y2);\n                }\n            } else {\n                let x2 = x0 + G2;\n                let y2 = y0 + (G2 - 1);\n                let a2 = 2.0 / 3.0 - x2 * x2 - y2 * y2;\n                if (a2 > 0) {\n                    value +=\n                        a2 * a2 * (a2 * a2) * this._GradCoordR2(seed, i, j + this._PrimeY, x2, y2);\n                }\n            }\n        }\n\n        return value * 18.24196194486065;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SingleOpenSimplex2SR3 (seed, x, y, z) {\n        // 3D OpenSimplex2S case uses two offset rotated cube grids.\n\n        /*\n         * --- Rotation moved to TransformNoiseCoordinate method ---\n         * final FNLfloat R3 = (FNLfloat)(2.0 / 3.0);\n         * FNLfloat r = (x + y + z) * R3; // Rotation, not skew\n         * x = r - x; y = r - y; z = r - z;\n         */\n\n        let i = Math.floor(x);\n        let j = Math.floor(y);\n        let k = Math.floor(z);\n        let xi = x - i;\n        let yi = y - j;\n        let zi = z - k;\n\n        i = Math.imul(i, this._PrimeX);\n        j = Math.imul(j, this._PrimeY);\n        k = Math.imul(k, this._PrimeZ);\n        let seed2 = seed + 1293373;\n\n        let xNMask = Math.trunc(-0.5 - xi);\n        let yNMask = Math.trunc(-0.5 - yi);\n        let zNMask = Math.trunc(-0.5 - zi);\n\n        let x0 = xi + xNMask;\n        let y0 = yi + yNMask;\n        let z0 = zi + zNMask;\n        let a0 = 0.75 - x0 * x0 - y0 * y0 - z0 * z0;\n        let value =\n            a0 *\n            a0 *\n            (a0 * a0) *\n            this._GradCoordR3(\n                seed,\n                i + (xNMask & this._PrimeX),\n                j + (yNMask & this._PrimeY),\n                k + (zNMask & this._PrimeZ),\n                x0,\n                y0,\n                z0\n            );\n\n        let x1 = xi - 0.5;\n        let y1 = yi - 0.5;\n        let z1 = zi - 0.5;\n        let a1 = 0.75 - x1 * x1 - y1 * y1 - z1 * z1;\n        value +=\n            a1 *\n            a1 *\n            (a1 * a1) *\n            this._GradCoordR3(seed2, i + this._PrimeX, j + this._PrimeY, k + this._PrimeZ, x1, y1, z1);\n\n        let xAFlipMask0 = ((xNMask | 1) << 1) * x1;\n        let yAFlipMask0 = ((yNMask | 1) << 1) * y1;\n        let zAFlipMask0 = ((zNMask | 1) << 1) * z1;\n        let xAFlipMask1 = (-2 - (xNMask << 2)) * x1 - 1.0;\n        let yAFlipMask1 = (-2 - (yNMask << 2)) * y1 - 1.0;\n        let zAFlipMask1 = (-2 - (zNMask << 2)) * z1 - 1.0;\n\n        let skip5 = false;\n        let a2 = xAFlipMask0 + a0;\n        if (a2 > 0) {\n            let x2 = x0 - (xNMask | 1);\n            value +=\n                a2 *\n                a2 *\n                (a2 * a2) *\n                this._GradCoordR3(\n                    seed,\n                    i + (~xNMask & this._PrimeX),\n                    j + (yNMask & this._PrimeY),\n                    k + (zNMask & this._PrimeZ),\n                    x2,\n                    y0,\n                    z0\n                );\n        } else {\n            let a3 = yAFlipMask0 + zAFlipMask0 + a0;\n\n            if (a3 > 0) {\n                let x3 = x0;\n                let y3 = y0 - (yNMask | 1);\n                let z3 = z0 - (zNMask | 1);\n                value +=\n                    a3 *\n                    a3 *\n                    (a3 * a3) *\n                    this._GradCoordR3(\n                        seed,\n                        i + (xNMask & this._PrimeX),\n                        j + (~yNMask & this._PrimeY),\n                        k + (~zNMask & this._PrimeZ),\n                        x3,\n                        y3,\n                        z3\n                    );\n            }\n\n            let a4 = xAFlipMask1 + a1;\n            if (a4 > 0) {\n                let x4 = (xNMask | 1) + x1;\n                value +=\n                    a4 *\n                    a4 *\n                    (a4 * a4) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + (xNMask & (this._PrimeX * 2)),\n                        j + this._PrimeY,\n                        k + this._PrimeZ,\n                        x4,\n                        y1,\n                        z1\n                    );\n                skip5 = true;\n            }\n        }\n\n        let skip9 = false;\n        let a6 = yAFlipMask0 + a0;\n        if (a6 > 0) {\n            let x6 = x0;\n            let y6 = y0 - (yNMask | 1);\n            value +=\n                a6 *\n                a6 *\n                (a6 * a6) *\n                this._GradCoordR3(\n                    seed,\n                    i + (xNMask & this._PrimeX),\n                    j + (~yNMask & this._PrimeY),\n                    k + (zNMask & this._PrimeZ),\n                    x6,\n                    y6,\n                    z0\n                );\n        } else {\n            let a7 = xAFlipMask0 + zAFlipMask0 + a0;\n            if (a7 > 0) {\n                let x7 = x0 - (xNMask | 1);\n                let y7 = y0;\n                let z7 = z0 - (zNMask | 1);\n                value +=\n                    a7 *\n                    a7 *\n                    (a7 * a7) *\n                    this._GradCoordR3(\n                        seed,\n                        i + (~xNMask & this._PrimeX),\n                        j + (yNMask & this._PrimeY),\n                        k + (~zNMask & this._PrimeZ),\n                        x7,\n                        y7,\n                        z7\n                    );\n            }\n\n            let a8 = yAFlipMask1 + a1;\n            if (a8 > 0) {\n                let x8 = x1;\n                let y8 = (yNMask | 1) + y1;\n                value +=\n                    a8 *\n                    a8 *\n                    (a8 * a8) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + this._PrimeX,\n                        j + (yNMask & (this._PrimeY << 1)),\n                        k + this._PrimeZ,\n                        x8,\n                        y8,\n                        z1\n                    );\n                skip9 = true;\n            }\n        }\n\n        let skipD = false;\n        let aA = zAFlipMask0 + a0;\n        if (aA > 0) {\n            let xA = x0;\n            let yA = y0;\n            let zA = z0 - (zNMask | 1);\n            value +=\n                aA *\n                aA *\n                (aA * aA) *\n                this._GradCoordR3(\n                    seed,\n                    i + (xNMask & this._PrimeX),\n                    j + (yNMask & this._PrimeY),\n                    k + (~zNMask & this._PrimeZ),\n                    xA,\n                    yA,\n                    zA\n                );\n        } else {\n            let aB = xAFlipMask0 + yAFlipMask0 + a0;\n            if (aB > 0) {\n                let xB = x0 - (xNMask | 1);\n                let yB = y0 - (yNMask | 1);\n                value +=\n                    aB *\n                    aB *\n                    (aB * aB) *\n                    this._GradCoordR3(\n                        seed,\n                        i + (~xNMask & this._PrimeX),\n                        j + (~yNMask & this._PrimeY),\n                        k + (zNMask & this._PrimeZ),\n                        xB,\n                        yB,\n                        z0\n                    );\n            }\n\n            let aC = zAFlipMask1 + a1;\n            if (aC > 0) {\n                let xC = x1;\n                let yC = y1;\n                let zC = (zNMask | 1) + z1;\n                value +=\n                    aC *\n                    aC *\n                    (aC * aC) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + this._PrimeX,\n                        j + this._PrimeY,\n                        k + (zNMask & (this._PrimeZ << 1)),\n                        xC,\n                        yC,\n                        zC\n                    );\n                skipD = true;\n            }\n        }\n\n        if (!skip5) {\n            let a5 = yAFlipMask1 + zAFlipMask1 + a1;\n            if (a5 > 0) {\n                let x5 = x1;\n                let y5 = (yNMask | 1) + y1;\n                let z5 = (zNMask | 1) + z1;\n                value +=\n                    a5 *\n                    a5 *\n                    (a5 * a5) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + this._PrimeX,\n                        j + (yNMask & (this._PrimeY << 1)),\n                        k + (zNMask & (this._PrimeZ << 1)),\n                        x5,\n                        y5,\n                        z5\n                    );\n            }\n        }\n\n        if (!skip9) {\n            let a9 = xAFlipMask1 + zAFlipMask1 + a1;\n            if (a9 > 0) {\n                let x9 = (xNMask | 1) + x1;\n                let y9 = y1;\n                let z9 = (zNMask | 1) + z1;\n                value +=\n                    a9 *\n                    a9 *\n                    (a9 * a9) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + (xNMask & (this._PrimeX * 2)),\n                        j + this._PrimeY,\n                        k + (zNMask & (this._PrimeZ << 1)),\n                        x9,\n                        y9,\n                        z9\n                    );\n            }\n        }\n\n        if (!skipD) {\n            let aD = xAFlipMask1 + yAFlipMask1 + a1;\n            if (aD > 0) {\n                let xD = (xNMask | 1) + x1;\n                let yD = (yNMask | 1) + y1;\n                value +=\n                    aD *\n                    aD *\n                    (aD * aD) *\n                    this._GradCoordR3(\n                        seed2,\n                        i + (xNMask & (this._PrimeX << 1)),\n                        j + (yNMask & (this._PrimeY << 1)),\n                        k + this._PrimeZ,\n                        xD,\n                        yD,\n                        z1\n                    );\n            }\n        }\n\n        return value * 9.046026385208288;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SingleCellularR2(seed,x,y) {\n        /**\n         *\n         * @param {number} seed\n         * @param {number} x\n         * @param {number} y\n         * @returns {number}\n         */\n        let xr = Math.round(x);\n        let yr = Math.round(y);\n\n        let distance0 = Number.MAX_VALUE;\n        let distance1 = Number.MAX_VALUE;\n\n        let closestHash = 0;\n\n        let cellularJitter = 0.43701595 * this._CellularJitterModifier;\n\n        let xPrimed = (xr - 1) * this._PrimeX;\n        let yPrimedBase = (yr - 1) * this._PrimeY;\n\n        switch (this._CellularDistanceFunction) {\n            default:\n            case FastNoiseLite.CellularDistanceFunction.Euclidean:\n            case FastNoiseLite.CellularDistanceFunction.EuclideanSq:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let hash = this._HashR2(seed, xPrimed, yPrimed);\n                        let idx = hash & (255 << 1);\n\n                        let vecX = xi - x + this._RandVecs2D[idx] * cellularJitter;\n                        let vecY = yi - y + this._RandVecs2D[idx | 1] * cellularJitter;\n\n                        let newDistance = vecX * vecX + vecY * vecY;\n\n                        distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                        if (newDistance < distance0) {\n                            distance0 = newDistance;\n                            closestHash = hash;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n            case FastNoiseLite.CellularDistanceFunction.Manhattan:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let hash = this._HashR2(seed, xPrimed, yPrimed);\n                        let idx = hash & (255 << 1);\n\n                        let vecX = xi - x + this._RandVecs2D[idx] * cellularJitter;\n                        let vecY = yi - y + this._RandVecs2D[idx | 1] * cellularJitter;\n\n                        let newDistance = Math.abs(vecX) + Math.abs(vecY);\n\n                        distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                        if (newDistance < distance0) {\n                            distance0 = newDistance;\n                            closestHash = hash;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n            case FastNoiseLite.CellularDistanceFunction.Hybrid:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let hash = this._HashR2(seed, xPrimed, yPrimed);\n                        let idx = hash & (255 << 1);\n\n                        let vecX = xi - x + this._RandVecs2D[idx] * cellularJitter;\n                        let vecY = yi - y + this._RandVecs2D[idx | 1] * cellularJitter;\n\n                        let newDistance =\n                            Math.abs(vecX) + Math.abs(vecY) + (vecX * vecX + vecY * vecY);\n\n                        distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                        if (newDistance < distance0) {\n                            distance0 = newDistance;\n                            closestHash = hash;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n        }\n\n        if (\n            this._CellularDistanceFunction === FastNoiseLite.CellularDistanceFunction.Euclidean &&\n            this._CellularReturnType !== FastNoiseLite.CellularReturnType.CellValue\n        ) {\n            distance0 = Math.sqrt(distance0);\n\n            if (this._CellularReturnType !== FastNoiseLite.CellularReturnType.CellValue) {\n                distance1 = Math.sqrt(distance1);\n            }\n        }\n\n        switch (this._CellularReturnType) {\n            case FastNoiseLite.CellularReturnType.CellValue:\n                return closestHash * (1 / 2147483648.0);\n            case FastNoiseLite.CellularReturnType.Distance:\n                return distance0 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2:\n                return distance1 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Add:\n                return (distance1 + distance0) * 0.5 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Sub:\n                return distance1 - distance0 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Mul:\n                return distance1 * distance0 * 0.5 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Div:\n                return distance0 / distance1 - 1;\n            default:\n                return 0;\n        }\n\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SingleCellularR3 (seed, x, y, z) {\n        let xr = Math.round(x);\n        let yr = Math.round(y);\n        let zr = Math.round(z);\n\n        let distance0 = Number.MAX_VALUE;\n        let distance1 = Number.MAX_VALUE;\n        let closestHash = 0;\n\n        let cellularJitter = 0.39614353 * this._CellularJitterModifier;\n\n        let xPrimed = (xr - 1) * this._PrimeX;\n        let yPrimedBase = (yr - 1) * this._PrimeY;\n        let zPrimedBase = (zr - 1) * this._PrimeZ;\n\n        switch (this._CellularDistanceFunction) {\n            case FastNoiseLite.CellularDistanceFunction.Euclidean:\n            case FastNoiseLite.CellularDistanceFunction.EuclideanSq:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let zPrimed = zPrimedBase;\n\n                        for (let zi = zr - 1; zi <= zr + 1; zi++) {\n                            let hash = this._HashR3(seed, xPrimed, yPrimed, zPrimed);\n                            let idx = hash & (255 << 2);\n\n                            let vecX = xi - x + this._RandVecs3D[idx] * cellularJitter;\n                            let vecY = yi - y + this._RandVecs3D[idx | 1] * cellularJitter;\n                            let vecZ = zi - z + this._RandVecs3D[idx | 2] * cellularJitter;\n\n                            let newDistance = vecX * vecX + vecY * vecY + vecZ * vecZ;\n\n                            distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                            if (newDistance < distance0) {\n                                distance0 = newDistance;\n                                closestHash = hash;\n                            }\n                            zPrimed += this._PrimeZ;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n            case FastNoiseLite.CellularDistanceFunction.Manhattan:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let zPrimed = zPrimedBase;\n\n                        for (let zi = zr - 1; zi <= zr + 1; zi++) {\n                            let hash = this._HashR3(seed, xPrimed, yPrimed, zPrimed);\n                            let idx = hash & (255 << 2);\n\n                            let vecX = xi - x + this._RandVecs3D[idx] * cellularJitter;\n                            let vecY = yi - y + this._RandVecs3D[idx | 1] * cellularJitter;\n                            let vecZ = zi - z + this._RandVecs3D[idx | 2] * cellularJitter;\n\n                            let newDistance = Math.abs(vecX) + Math.abs(vecY) + Math.abs(vecZ);\n\n                            distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                            if (newDistance < distance0) {\n                                distance0 = newDistance;\n                                closestHash = hash;\n                            }\n                            zPrimed += this._PrimeZ;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n            case FastNoiseLite.CellularDistanceFunction.Hybrid:\n                for (let xi = xr - 1; xi <= xr + 1; xi++) {\n                    let yPrimed = yPrimedBase;\n\n                    for (let yi = yr - 1; yi <= yr + 1; yi++) {\n                        let zPrimed = zPrimedBase;\n\n                        for (let zi = zr - 1; zi <= zr + 1; zi++) {\n                            let hash = this._HashR3(seed, xPrimed, yPrimed, zPrimed);\n                            let idx = hash & (255 << 2);\n\n                            let vecX = xi - x + this._RandVecs3D[idx] * cellularJitter;\n                            let vecY = yi - y + this._RandVecs3D[idx | 1] * cellularJitter;\n                            let vecZ = zi - z + this._RandVecs3D[idx | 2] * cellularJitter;\n\n                            let newDistance =\n                                Math.abs(vecX) +\n                                Math.abs(vecY) +\n                                Math.abs(vecZ) +\n                                (vecX * vecX + vecY * vecY + vecZ * vecZ);\n\n                            distance1 = Math.max(Math.min(distance1, newDistance), distance0);\n                            if (newDistance < distance0) {\n                                distance0 = newDistance;\n                                closestHash = hash;\n                            }\n                            zPrimed += this._PrimeZ;\n                        }\n                        yPrimed += this._PrimeY;\n                    }\n                    xPrimed += this._PrimeX;\n                }\n                break;\n            default:\n                break;\n        }\n\n        if (\n            this._CellularDistanceFunction === FastNoiseLite.CellularDistanceFunction.Euclidean &&\n            this._CellularReturnType !== FastNoiseLite.CellularReturnType.CellValue\n        ) {\n            distance0 = Math.sqrt(distance0);\n\n            if (this._CellularReturnType !== FastNoiseLite.CellularReturnType.CellValue) {\n                distance1 = Math.sqrt(distance1);\n            }\n        }\n\n        switch (this._CellularReturnType) {\n            case FastNoiseLite.CellularReturnType.CellValue:\n                return closestHash * (1 / 2147483648.0);\n            case FastNoiseLite.CellularReturnType.Distance:\n                return distance0 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2:\n                return distance1 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Add:\n                return (distance1 + distance0) * 0.5 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Sub:\n                return distance1 - distance0 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Mul:\n                return distance1 * distance0 * 0.5 - 1;\n            case FastNoiseLite.CellularReturnType.Distance2Div:\n                return distance0 / distance1 - 1;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SinglePerlinR2(seed, x, y) {\n        let x0 = Math.floor(x);\n        let y0 = Math.floor(y);\n\n        let xd0 = x - x0;\n        let yd0 = y - y0;\n        let xd1 = xd0 - 1;\n        let yd1 = yd0 - 1;\n\n        let xs = FastNoiseLite._InterpQuintic(xd0);\n        let ys = FastNoiseLite._InterpQuintic(yd0);\n\n        x0 = Math.imul(x0, this._PrimeX);\n        y0 = Math.imul(y0, this._PrimeY);\n        let x1 = x0 + this._PrimeX;\n        let y1 = y0 + this._PrimeY;\n\n        let xf0 = FastNoiseLite._Lerp(\n            this._GradCoordR2(seed, x0, y0, xd0, yd0),\n            this._GradCoordR2(seed, x1, y0, xd1, yd0),\n            xs\n        );\n        let xf1 = FastNoiseLite._Lerp(\n            this._GradCoordR2(seed, x0, y1, xd0, yd1),\n            this._GradCoordR2(seed, x1, y1, xd1, yd1),\n            xs\n        );\n\n        return FastNoiseLite._Lerp(xf0, xf1, ys) * 1.4247691104677813;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SinglePerlinR3 (seed, x, y, z) {\n        let x0 = Math.floor(x);\n        let y0 = Math.floor(y);\n        let z0 = Math.floor(z);\n\n        let xd0 = x - x0;\n        let yd0 = y - y0;\n        let zd0 = z - z0;\n        let xd1 = xd0 - 1;\n        let yd1 = yd0 - 1;\n        let zd1 = zd0 - 1;\n\n        let xs = FastNoiseLite._InterpQuintic(xd0);\n        let ys = FastNoiseLite._InterpQuintic(yd0);\n        let zs = FastNoiseLite._InterpQuintic(zd0);\n\n        x0 = Math.imul(x0, this._PrimeX);\n        y0 = Math.imul(y0, this._PrimeY);\n        z0 = Math.imul(z0, this._PrimeZ);\n        let x1 = x0 + this._PrimeX;\n        let y1 = y0 + this._PrimeY;\n        let z1 = z0 + this._PrimeZ;\n\n        let xf00 = FastNoiseLite._Lerp(\n            this._GradCoordR3(seed, x0, y0, z0, xd0, yd0, zd0),\n            this._GradCoordR3(seed, x1, y0, z0, xd1, yd0, zd0),\n            xs\n        );\n        let xf10 = FastNoiseLite._Lerp(\n            this._GradCoordR3(seed, x0, y1, z0, xd0, yd1, zd0),\n            this._GradCoordR3(seed, x1, y1, z0, xd1, yd1, zd0),\n            xs\n        );\n        let xf01 = FastNoiseLite._Lerp(\n            this._GradCoordR3(seed, x0, y0, z1, xd0, yd0, zd1),\n            this._GradCoordR3(seed, x1, y0, z1, xd1, yd0, zd1),\n            xs\n        );\n        let xf11 = FastNoiseLite._Lerp(\n            this._GradCoordR3(seed, x0, y1, z1, xd0, yd1, zd1),\n            this._GradCoordR3(seed, x1, y1, z1, xd1, yd1, zd1),\n            xs\n        );\n\n        let yf0 = FastNoiseLite._Lerp(xf00, xf10, ys);\n        let yf1 = FastNoiseLite._Lerp(xf01, xf11, ys);\n\n        return FastNoiseLite._Lerp(yf0, yf1, zs) * 0.964921414852142333984375;\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SingleValueCubicR2(seed, x, y) {\n        let x1 = Math.floor(x);\n        let y1 = Math.floor(y);\n\n        let xs = x - x1;\n        let ys = y - y1;\n\n        x1 = Math.imul(x1, this._PrimeX);\n        y1 = Math.imul(y1, this._PrimeY);\n        let x0 = x1 - this._PrimeX;\n        let y0 = y1 - this._PrimeY;\n        let x2 = x1 + this._PrimeX;\n        let y2 = y1 + this._PrimeY;\n        let x3 = x1 + (this._PrimeX << 1);\n        let y3 = y1 + (this._PrimeY << 1);\n\n        return (\n            FastNoiseLite._CubicLerp(\n                FastNoiseLite._CubicLerp(\n                    this._ValCoordR2(seed, x0, y0),\n                    this._ValCoordR2(seed, x1, y0),\n                    this._ValCoordR2(seed, x2, y0),\n                    this._ValCoordR2(seed, x3, y0),\n                    xs\n                ),\n                FastNoiseLite._CubicLerp(\n                    this._ValCoordR2(seed, x0, y1),\n                    this._ValCoordR2(seed, x1, y1),\n                    this._ValCoordR2(seed, x2, y1),\n                    this._ValCoordR2(seed, x3, y1),\n                    xs\n                ),\n                FastNoiseLite._CubicLerp(\n                    this._ValCoordR2(seed, x0, y2),\n                    this._ValCoordR2(seed, x1, y2),\n                    this._ValCoordR2(seed, x2, y2),\n                    this._ValCoordR2(seed, x3, y2),\n                    xs\n                ),\n                FastNoiseLite._CubicLerp(\n                    this._ValCoordR2(seed, x0, y3),\n                    this._ValCoordR2(seed, x1, y3),\n                    this._ValCoordR2(seed, x2, y3),\n                    this._ValCoordR2(seed, x3, y3),\n                    xs\n                ),\n                ys\n            ) *\n            (1 / (1.5 * 1.5))\n        );\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SingleValueCubicR3(seed, x, y, z) {\n        let x1 = Math.floor(x);\n        let y1 = Math.floor(y);\n        let z1 = Math.floor(z);\n\n        let xs = x - x1;\n        let ys = y - y1;\n        let zs = z - z1;\n\n        x1 = Math.imul(x1, this._PrimeX);\n        y1 = Math.imul(y1, this._PrimeY);\n        z1 = Math.imul(z1, this._PrimeZ);\n\n        let x0 = x1 - this._PrimeX;\n        let y0 = y1 - this._PrimeY;\n        let z0 = z1 - this._PrimeZ;\n        let x2 = x1 + this._PrimeX;\n        let y2 = y1 + this._PrimeY;\n        let z2 = z1 + this._PrimeZ;\n        let x3 = x1 + (this._PrimeX << 1);\n        let y3 = y1 + (this._PrimeY << 1);\n        let z3 = z1 + (this._PrimeZ << 1);\n\n        return (\n            FastNoiseLite._CubicLerp(\n                FastNoiseLite._CubicLerp(\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y0, z0),\n                        this._ValCoordR3(seed, x1, y0, z0),\n                        this._ValCoordR3(seed, x2, y0, z0),\n                        this._ValCoordR3(seed, x3, y0, z0),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y1, z0),\n                        this._ValCoordR3(seed, x1, y1, z0),\n                        this._ValCoordR3(seed, x2, y1, z0),\n                        this._ValCoordR3(seed, x3, y1, z0),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y2, z0),\n                        this._ValCoordR3(seed, x1, y2, z0),\n                        this._ValCoordR3(seed, x2, y2, z0),\n                        this._ValCoordR3(seed, x3, y2, z0),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y3, z0),\n                        this._ValCoordR3(seed, x1, y3, z0),\n                        this._ValCoordR3(seed, x2, y3, z0),\n                        this._ValCoordR3(seed, x3, y3, z0),\n                        xs\n                    ),\n                    ys\n                ),\n                FastNoiseLite._CubicLerp(\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y0, z1),\n                        this._ValCoordR3(seed, x1, y0, z1),\n                        this._ValCoordR3(seed, x2, y0, z1),\n                        this._ValCoordR3(seed, x3, y0, z1),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y1, z1),\n                        this._ValCoordR3(seed, x1, y1, z1),\n                        this._ValCoordR3(seed, x2, y1, z1),\n                        this._ValCoordR3(seed, x3, y1, z1),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y2, z1),\n                        this._ValCoordR3(seed, x1, y2, z1),\n                        this._ValCoordR3(seed, x2, y2, z1),\n                        this._ValCoordR3(seed, x3, y2, z1),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y3, z1),\n                        this._ValCoordR3(seed, x1, y3, z1),\n                        this._ValCoordR3(seed, x2, y3, z1),\n                        this._ValCoordR3(seed, x3, y3, z1),\n                        xs\n                    ),\n                    ys\n                ),\n                FastNoiseLite._CubicLerp(\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y0, z2),\n                        this._ValCoordR3(seed, x1, y0, z2),\n                        this._ValCoordR3(seed, x2, y0, z2),\n                        this._ValCoordR3(seed, x3, y0, z2),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y1, z2),\n                        this._ValCoordR3(seed, x1, y1, z2),\n                        this._ValCoordR3(seed, x2, y1, z2),\n                        this._ValCoordR3(seed, x3, y1, z2),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y2, z2),\n                        this._ValCoordR3(seed, x1, y2, z2),\n                        this._ValCoordR3(seed, x2, y2, z2),\n                        this._ValCoordR3(seed, x3, y2, z2),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y3, z2),\n                        this._ValCoordR3(seed, x1, y3, z2),\n                        this._ValCoordR3(seed, x2, y3, z2),\n                        this._ValCoordR3(seed, x3, y3, z2),\n                        xs\n                    ),\n                    ys\n                ),\n                FastNoiseLite._CubicLerp(\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y0, z3),\n                        this._ValCoordR3(seed, x1, y0, z3),\n                        this._ValCoordR3(seed, x2, y0, z3),\n                        this._ValCoordR3(seed, x3, y0, z3),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y1, z3),\n                        this._ValCoordR3(seed, x1, y1, z3),\n                        this._ValCoordR3(seed, x2, y1, z3),\n                        this._ValCoordR3(seed, x3, y1, z3),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y2, z3),\n                        this._ValCoordR3(seed, x1, y2, z3),\n                        this._ValCoordR3(seed, x2, y2, z3),\n                        this._ValCoordR3(seed, x3, y2, z3),\n                        xs\n                    ),\n                    FastNoiseLite._CubicLerp(\n                        this._ValCoordR3(seed, x0, y3, z3),\n                        this._ValCoordR3(seed, x1, y3, z3),\n                        this._ValCoordR3(seed, x2, y3, z3),\n                        this._ValCoordR3(seed, x3, y3, z3),\n                        xs\n                    ),\n                    ys\n                ),\n                zs\n            ) *\n            (1 / (1.5 * 1.5 * 1.5))\n        );\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    _SingleValueR2(seed, x, y) {\n        let x0 = Math.floor(x);\n        let y0 = Math.floor(y);\n\n        let xs = FastNoiseLite._InterpHermite(x - x0);\n        let ys = FastNoiseLite._InterpHermite(y - y0);\n\n        x0 = Math.imul(x0, this._PrimeX);\n        y0 = Math.imul(y0, this._PrimeY);\n        let x1 = x0 + this._PrimeX;\n        let y1 = y0 + this._PrimeY;\n\n        let xf0 = FastNoiseLite._Lerp(this._ValCoordR2(seed, x0, y0), this._ValCoordR2(seed, x1, y0), xs);\n        let xf1 = FastNoiseLite._Lerp(this._ValCoordR2(seed, x0, y1), this._ValCoordR2(seed, x1, y1), xs);\n\n        return FastNoiseLite._Lerp(xf0, xf1, ys);\n    }\n\n    /**\n     * @private\n     * @param {number} seed\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    _SingleValueR3(seed, x, y, z) {\n        let x0 = Math.floor(x);\n        let y0 = Math.floor(y);\n        let z0 = Math.floor(z);\n\n        let xs = FastNoiseLite._InterpHermite(x - x0);\n        let ys = FastNoiseLite._InterpHermite(y - y0);\n        let zs = FastNoiseLite._InterpHermite(z - z0);\n\n        x0 = Math.imul(x0, this._PrimeX);\n        y0 = Math.imul(y0, this._PrimeY);\n        z0 = Math.imul(z0, this._PrimeZ);\n        let x1 = x0 + this._PrimeX;\n        let y1 = y0 + this._PrimeY;\n        let z1 = z0 + this._PrimeZ;\n\n        let xf00 = FastNoiseLite._Lerp(\n            this._ValCoordR3(seed, x0, y0, z0),\n            this._ValCoordR3(seed, x1, y0, z0),\n            xs\n        );\n        let xf10 = FastNoiseLite._Lerp(\n            this._ValCoordR3(seed, x0, y1, z0),\n            this._ValCoordR3(seed, x1, y1, z0),\n            xs\n        );\n        let xf01 = FastNoiseLite._Lerp(\n            this._ValCoordR3(seed, x0, y0, z1),\n            this._ValCoordR3(seed, x1, y0, z1),\n            xs\n        );\n        let xf11 = FastNoiseLite._Lerp(\n            this._ValCoordR3(seed, x0, y1, z1),\n            this._ValCoordR3(seed, x1, y1, z1),\n            xs\n        );\n\n        let yf0 = FastNoiseLite._Lerp(xf00, xf10, ys);\n        let yf1 = FastNoiseLite._Lerp(xf01, xf11, ys);\n\n        return FastNoiseLite._Lerp(yf0, yf1, zs);\n    }\n\n    /**\n     * @private\n     */\n    _DoSingleDomainWarp() {\n        /**\n         *\n         * @param {number} seed\n         * @param {number} amp\n         * @param {number} freq\n         * @param {Vector2} coord\n         * @param {number} x\n         * @param {number} y\n         */\n        let R2 = (seed, amp, freq, coord, x, y) => {\n            switch (this._DomainWarpType) {\n                case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                    this._SingleDomainWarpOpenSimplex2Gradient(\n                        seed,\n                        amp * 38.283687591552734375,\n                        freq,\n                        coord,\n                        false,\n                        x,\n                        y\n                    );\n                    break;\n                case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                    this._SingleDomainWarpOpenSimplex2Gradient(\n                        seed,\n                        amp * 16.0,\n                        freq,\n                        coord,\n                        true,\n                        x,\n                        y\n                    );\n                    break;\n                case FastNoiseLite.DomainWarpType.BasicGrid:\n                    this._SingleDomainWarpBasicGrid(seed, amp, freq, coord, x, y);\n                    break;\n            }\n        };\n\n        /**\n         *\n         * @param {number} seed\n         * @param {number} amp\n         * @param {number} freq\n         * @param {Vector3} coord\n         * @param {number} x\n         * @param {number} y\n         * @param {number} z\n         */\n        let R3 = (seed, amp, freq, coord, x, y, z) => {\n            switch (this._DomainWarpType) {\n                case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                    this._SingleDomainWarpOpenSimplex2Gradient(\n                        seed,\n                        amp * 32.69428253173828125,\n                        freq,\n                        coord,\n                        false,\n                        x,\n                        y,\n                        z\n                    );\n                    break;\n                case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                    this._SingleDomainWarpOpenSimplex2Gradient(\n                        seed,\n                        amp * 7.71604938271605,\n                        freq,\n                        coord,\n                        true,\n                        x,\n                        y,\n                        z\n                    );\n                    break;\n                case FastNoiseLite.DomainWarpType.BasicGrid:\n                    this._SingleDomainWarpBasicGrid(seed, amp, freq, coord, x, y, z);\n                    break;\n            }\n        };\n\n        if (arguments.length === 6 && arguments[3] instanceof Vector2) {\n            return R2(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n\n        if (arguments.length === 7 && arguments[3] instanceof Vector3) {\n            return R3(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                arguments[4],\n                arguments[5],\n                arguments[6]\n            );\n        }\n    }\n\n    /**\n     * @private\n     */\n    _DomainWarpSingle() {\n        /**\n         *\n         * @param {Vector2} coord\n         */\n        let R2 = coord => {\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n\n            let xs = coord.x;\n            let ys = coord.y;\n            switch (this._DomainWarpType) {\n                case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                    const SQRT3 = 1.7320508075688772935274463415059;\n                    const F2 = 0.5 * (SQRT3 - 1);\n                    let t = (xs + ys) * F2;\n                    xs += t;\n                    ys += t;\n                    break;\n                default:\n                    break;\n            }\n\n            this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys);\n        };\n\n        /**\n         *\n         * @param {Vector3} coord\n         */\n        let R3 = coord => {\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n\n            let xs = coord.x;\n            let ys = coord.y;\n            let zs = coord.z;\n            switch (this._WarpTransformType3D) {\n                case FastNoiseLite.TransformType3D.ImproveXYPlanes:\n                {\n                    let xy = xs + ys;\n                    let s2 = xy * -0.211324865405187;\n                    zs *= 0.577350269189626;\n                    xs += s2 - zs;\n                    ys = ys + s2 - zs;\n                    zs += xy * 0.577350269189626;\n                }\n                    break;\n\n                case FastNoiseLite.TransformType3D.ImproveXZPlanes:\n                {\n                    let xz = xs + zs;\n                    let s2 = xz * -0.211324865405187;\n                    ys *= 0.577350269189626;\n                    xs += s2 - ys;\n                    zs += s2 - ys;\n                    ys += xz * 0.577350269189626;\n                }\n                    break;\n                case FastNoiseLite.TransformType3D.DefaultOpenSimplex2:\n                    const R3 = 2.0 / 3.0;\n                    let r = (xs + ys + zs) * R3; // Rotation, not skew\n                    xs = r - xs;\n                    ys = r - ys;\n                    zs = r - zs;\n                    break;\n                default:\n                    break;\n            }\n\n            this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys, zs);\n        };\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector2) {\n            return R2(arguments[0]);\n        }\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector3) {\n            return R3(arguments[0]);\n        }\n    }\n\n    _DomainWarpFractalProgressive() {\n        /**\n         *\n         * @param {Vector2} coord\n         */\n        let R2 = coord => {\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n\n            for (let i = 0; i < this._Octaves; i++) {\n                let xs = coord.x;\n                let ys = coord.y;\n                switch (this._DomainWarpType) {\n                    case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                    case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                        const SQRT3 = 1.7320508075688772935274463415059;\n                        const F2 = 0.5 * (SQRT3 - 1);\n                        let t = (xs + ys) * F2;\n                        xs += t;\n                        ys += t;\n                        break;\n                    default:\n                        break;\n                }\n\n                this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys);\n\n                seed++;\n                amp *= this._Gain;\n                freq *= this._Lacunarity;\n            }\n        };\n\n        /**\n         *\n         * @param {Vector3} coord\n         */\n        let R3 = coord => {\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n\n            for (let i = 0; i < this._Octaves; i++) {\n                let xs = coord.x;\n                let ys = coord.y;\n                let zs = coord.z;\n                switch (this._WarpTransformType3D) {\n                    case FastNoiseLite.TransformType3D.ImproveXYPlanes:\n                    {\n                        let xy = xs + ys;\n                        let s2 = xy * -0.211324865405187;\n                        zs *= 0.577350269189626;\n                        xs += s2 - zs;\n                        ys = ys + s2 - zs;\n                        zs += xy * 0.577350269189626;\n                    }\n                        break;\n                    case FastNoiseLite.TransformType3D.ImproveXZPlanes:\n                    {\n                        let xz = xs + zs;\n                        let s2 = xz * -0.211324865405187;\n                        ys *= 0.577350269189626;\n                        xs += s2 - ys;\n                        zs += s2 - ys;\n                        ys += xz * 0.577350269189626;\n                    }\n                        break;\n                    case FastNoiseLite.TransformType3D.DefaultOpenSimplex2:\n                    {\n                        const R3 = 2.0 / 3.0;\n                        let r = (xs + ys + zs) * R3; // Rotation, not skew\n                        xs = r - xs;\n                        ys = r - ys;\n                        zs = r - zs;\n                    }\n                        break;\n                    default:\n                        break;\n                }\n\n                this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys, zs);\n\n                seed++;\n                amp *= this._Gain;\n                freq *= this._Lacunarity;\n            }\n        };\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector2) {\n            return R2(arguments[0]);\n        }\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector3) {\n            return R3(arguments[0]);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _DomainWarpFractalIndependent() {\n        /**\n         *\n         * @param {Vector2} coord\n         */\n        let R2 = coord => {\n            let xs = coord.x;\n            let ys = coord.y;\n            switch (this._DomainWarpType) {\n                case FastNoiseLite.DomainWarpType.OpenSimplex2:\n                case FastNoiseLite.DomainWarpType.OpenSimplex2Reduced:\n                    const SQRT3 = 1.7320508075688772935274463415059;\n                    const F2 = 0.5 * (SQRT3 - 1);\n                    let t = (xs + ys) * F2;\n                    xs += t;\n                    ys += t;\n                    break;\n                default:\n                    break;\n            }\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n\n            for (let i = 0; i < this._Octaves; i++) {\n                this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys);\n\n                seed++;\n                amp *= this._Gain;\n                freq *= this._Lacunarity;\n            }\n        };\n\n        /**\n         *\n         * @param {Vector3} coord\n         */\n        let R3 = coord => {\n            let xs = coord.x;\n            let ys = coord.y;\n            let zs = coord.z;\n            switch (this._WarpTransformType3D) {\n                case FastNoiseLite.TransformType3D.ImproveXYPlanes:\n                {\n                    let xy = xs + ys;\n                    let s2 = xy * -0.211324865405187;\n                    zs *= 0.577350269189626;\n                    xs += s2 - zs;\n                    ys = ys + s2 - zs;\n                    zs += xy * 0.577350269189626;\n                }\n                    break;\n                case FastNoiseLite.TransformType3D.ImproveXZPlanes:\n                {\n                    let xz = xs + zs;\n                    let s2 = xz * -0.211324865405187;\n                    ys *= 0.577350269189626;\n                    xs += s2 - ys;\n                    zs += s2 - ys;\n                    ys += xz * 0.577350269189626;\n                }\n                    break;\n                case FastNoiseLite.TransformType3D.DefaultOpenSimplex2:\n                {\n                    const R3 = 2.0 / 3.0;\n                    let r = (xs + ys + zs) * R3; // Rotation, not skew\n                    xs = r - xs;\n                    ys = r - ys;\n                    zs = r - zs;\n                }\n                    break;\n                default:\n                    break;\n            }\n\n            let seed = this._Seed;\n            let amp = this._DomainWarpAmp * this._FractalBounding;\n            let freq = this._Frequency;\n            for (let i = 0; i < this._Octaves; i++) {\n                this._DoSingleDomainWarp(seed, amp, freq, coord, xs, ys, zs);\n\n                seed++;\n                amp *= this._Gain;\n                freq *= this._Lacunarity;\n            }\n        };\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector2) {\n            return R2(arguments[0]);\n        }\n\n        if (arguments.length === 1 && arguments[0] instanceof Vector3) {\n            return R3(arguments[0]);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _SingleDomainWarpBasicGrid() {\n        /**\n         *\n         * @param {number} seed\n         * @param {number} warpAmp\n         * @param {number} frequency\n         * @param {Vector2} coord\n         * @param {number} x\n         * @param {number} y\n         */\n\n        let R2 = (seed, warpAmp, frequency, coord, x, y) => {\n            let xf = x * frequency;\n            let yf = y * frequency;\n\n            let x0 = Math.floor(xf);\n            let y0 = Math.floor(yf);\n\n            let xs = FastNoiseLite._InterpHermite(xf - x0);\n            let ys = FastNoiseLite._InterpHermite(yf - y0);\n\n            x0 = Math.imul(x0, this._PrimeX);\n            y0 = Math.imul(y0, this._PrimeY);\n            let x1 = x0 + this._PrimeX;\n            let y1 = y0 + this._PrimeY;\n\n            let hash0 = this._HashR2(seed, x0, y0) & (255 << 1);\n            let hash1 = this._HashR2(seed, x1, y0) & (255 << 1);\n\n            let lx0x = FastNoiseLite._Lerp(this._RandVecs2D[hash0], this._RandVecs2D[hash1], xs);\n            let ly0x = FastNoiseLite._Lerp(this._RandVecs2D[hash0 | 1], this._RandVecs2D[hash1 | 1], xs);\n\n            hash0 = this._HashR2(seed, x0, y1) & (255 << 1);\n            hash1 = this._HashR2(seed, x1, y1) & (255 << 1);\n\n            let lx1x = FastNoiseLite._Lerp(this._RandVecs2D[hash0], this._RandVecs2D[hash1], xs);\n            let ly1x = FastNoiseLite._Lerp(this._RandVecs2D[hash0 | 1], this._RandVecs2D[hash1 | 1], xs);\n\n            coord.x += FastNoiseLite._Lerp(lx0x, lx1x, ys) * warpAmp;\n            coord.y += FastNoiseLite._Lerp(ly0x, ly1x, ys) * warpAmp;\n        };\n\n        /**\n         *\n         * @param {number} seed\n         * @param {number} warpAmp\n         * @param {number} frequency\n         * @param {Vector3} coord\n         * @param {number} x\n         * @param {number} y\n         * @param {number} z\n         */\n        let R3 = (seed, warpAmp, frequency, coord, x, y, z) => {\n            let xf = x * frequency;\n            let yf = y * frequency;\n            let zf = z * frequency;\n\n            let x0 = Math.floor(xf);\n            let y0 = Math.floor(yf);\n            let z0 = Math.floor(zf);\n\n            let xs = FastNoiseLite._InterpHermite(xf - x0);\n            let ys = FastNoiseLite._InterpHermite(yf - y0);\n            let zs = FastNoiseLite._InterpHermite(zf - z0);\n\n            x0 = Math.imul(x0, this._PrimeX);\n            y0 = Math.imul(y0, this._PrimeY);\n            z0 = Math.imul(z0, this._PrimeZ);\n            let x1 = x0 + this._PrimeX;\n            let y1 = y0 + this._PrimeY;\n            let z1 = z0 + this._PrimeZ;\n\n            let hash0 = this._HashR3(seed, x0, y0, z0) & (255 << 2);\n            let hash1 = this._HashR3(seed, x1, y0, z0) & (255 << 2);\n\n            let lx0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0], this._RandVecs3D[hash1], xs);\n            let ly0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 1], this._RandVecs3D[hash1 | 1], xs);\n            let lz0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 2], this._RandVecs3D[hash1 | 2], xs);\n\n            hash0 = this._HashR3(seed, x0, y1, z0) & (255 << 2);\n            hash1 = this._HashR3(seed, x1, y1, z0) & (255 << 2);\n\n            let lx1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0], this._RandVecs3D[hash1], xs);\n            let ly1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 1], this._RandVecs3D[hash1 | 1], xs);\n            let lz1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 2], this._RandVecs3D[hash1 | 2], xs);\n\n            let lx0y = FastNoiseLite._Lerp(lx0x, lx1x, ys);\n            let ly0y = FastNoiseLite._Lerp(ly0x, ly1x, ys);\n            let lz0y = FastNoiseLite._Lerp(lz0x, lz1x, ys);\n\n            hash0 = this._HashR3(seed, x0, y0, z1) & (255 << 2);\n            hash1 = this._HashR3(seed, x1, y0, z1) & (255 << 2);\n\n            lx0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0], this._RandVecs3D[hash1], xs);\n            ly0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 1], this._RandVecs3D[hash1 | 1], xs);\n            lz0x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 2], this._RandVecs3D[hash1 | 2], xs);\n\n            hash0 = this._HashR3(seed, x0, y1, z1) & (255 << 2);\n            hash1 = this._HashR3(seed, x1, y1, z1) & (255 << 2);\n\n            lx1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0], this._RandVecs3D[hash1], xs);\n            ly1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 1], this._RandVecs3D[hash1 | 1], xs);\n            lz1x = FastNoiseLite._Lerp(this._RandVecs3D[hash0 | 2], this._RandVecs3D[hash1 | 2], xs);\n\n            coord.x += FastNoiseLite._Lerp(lx0y, FastNoiseLite._Lerp(lx0x, lx1x, ys), zs) * warpAmp;\n            coord.y += FastNoiseLite._Lerp(ly0y, FastNoiseLite._Lerp(ly0x, ly1x, ys), zs) * warpAmp;\n            coord.z += FastNoiseLite._Lerp(lz0y, FastNoiseLite._Lerp(lz0x, lz1x, ys), zs) * warpAmp;\n        };\n\n        if (arguments.length === 6 && arguments[3] instanceof Vector2) {\n            R2(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n\n        if (arguments.length === 7 && arguments[3] instanceof Vector3) {\n            R3(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                arguments[4],\n                arguments[5],\n                arguments[6]\n            );\n        }\n    }\n\n    /**\n     * @private\n     */\n    _SingleDomainWarpOpenSimplex2Gradient() {\n        /**\n         *\n         * @param {number} seed\n         * @param {number} warpAmp\n         * @param {number} frequency\n         * @param {Vector2} coord\n         * @param {boolean} outGradOnly\n         * @param {number} x\n         * @param {number} y\n         */\n        let R2 = (seed, warpAmp, frequency, coord, outGradOnly, x, y) => {\n            const SQRT3 = 1.7320508075688772935274463415059;\n            const G2 = (3 - SQRT3) / 6;\n\n            x *= frequency;\n            y *= frequency;\n\n            let i = Math.floor(x);\n            let j = Math.floor(y);\n            let xi = x - i;\n            let yi = y - j;\n\n            let t = (xi + yi) * G2;\n            let x0 = xi - t;\n            let y0 = yi - t;\n\n            i = Math.imul(i, this._PrimeX);\n            j = Math.imul(j, this._PrimeY);\n\n            let vx, vy;\n            vx = vy = 0;\n\n            let a = 0.5 - x0 * x0 - y0 * y0;\n            if (a > 0) {\n                let aaaa = a * a * (a * a);\n                let xo, yo;\n                if (outGradOnly) {\n                    let hash = this._HashR2(seed, i, j) & (255 << 1);\n                    xo = this._RandVecs2D[hash];\n                    yo = this._RandVecs2D[hash | 1];\n                } else {\n                    let hash = this._HashR2(seed, i, j);\n                    let index1 = hash & (127 << 1);\n                    let index2 = (hash >> 7) & (255 << 1);\n                    let xg = this._Gradients2D[index1];\n                    let yg = this._Gradients2D[index1 | 1];\n                    let value = x0 * xg + y0 * yg;\n                    let xgo = this._RandVecs2D[index2];\n                    let ygo = this._RandVecs2D[index2 | 1];\n                    xo = value * xgo;\n                    yo = value * ygo;\n                }\n                vx += aaaa * xo;\n                vy += aaaa * yo;\n            }\n\n            let c = 2 * (1 - 2 * G2) * (1 / G2 - 2) * t + (-2 * (1 - 2 * G2) * (1 - 2 * G2) + a);\n            if (c > 0) {\n                let x2 = x0 + (2 * G2 - 1);\n                let y2 = y0 + (2 * G2 - 1);\n                let cccc = c * c * (c * c);\n                let xo, yo;\n                if (outGradOnly) {\n                    let hash = this._HashR2(seed, i + this._PrimeX, j + this._PrimeY) & (255 << 1);\n                    xo = this._RandVecs2D[hash];\n                    yo = this._RandVecs2D[hash | 1];\n                } else {\n                    let hash = this._HashR2(seed, i + this._PrimeX, j + this._PrimeY);\n                    let index1 = hash & (127 << 1);\n                    let index2 = (hash >> 7) & (255 << 1);\n                    let xg = this._Gradients2D[index1];\n                    let yg = this._Gradients2D[index1 | 1];\n                    let value = x2 * xg + y2 * yg;\n                    let xgo = this._RandVecs2D[index2];\n                    let ygo = this._RandVecs2D[index2 | 1];\n                    xo = value * xgo;\n                    yo = value * ygo;\n                }\n                vx += cccc * xo;\n                vy += cccc * yo;\n            }\n\n            if (y0 > x0) {\n                let x1 = x0 + G2;\n                let y1 = y0 + (G2 - 1);\n                let b = 0.5 - x1 * x1 - y1 * y1;\n                if (b > 0) {\n                    let bbbb = b * b * (b * b);\n                    let xo, yo;\n                    if (outGradOnly) {\n                        let hash = this._HashR2(seed, i, j + this._PrimeY) & (255 << 1);\n                        xo = this._RandVecs2D[hash];\n                        yo = this._RandVecs2D[hash | 1];\n                    } else {\n                        let hash = this._HashR2(seed, i, j + this._PrimeY);\n                        let index1 = hash & (127 << 1);\n                        let index2 = (hash >> 7) & (255 << 1);\n                        let xg = this._Gradients2D[index1];\n                        let yg = this._Gradients2D[index1 | 1];\n                        let value = x1 * xg + y1 * yg;\n                        let xgo = this._RandVecs2D[index2];\n                        let ygo = this._RandVecs2D[index2 | 1];\n                        xo = value * xgo;\n                        yo = value * ygo;\n                    }\n                    vx += bbbb * xo;\n                    vy += bbbb * yo;\n                }\n            } else {\n                let x1 = x0 + (G2 - 1);\n                let y1 = y0 + G2;\n                let b = 0.5 - x1 * x1 - y1 * y1;\n                if (b > 0) {\n                    let bbbb = b * b * (b * b);\n                    let xo, yo;\n                    if (outGradOnly) {\n                        let hash = this._HashR2(seed, i + this._PrimeX, j) & (255 << 1);\n                        xo = this._RandVecs2D[hash];\n                        yo = this._RandVecs2D[hash | 1];\n                    } else {\n                        let hash = this._HashR2(seed, i + this._PrimeX, j);\n                        let index1 = hash & (127 << 1);\n                        let index2 = (hash >> 7) & (255 << 1);\n                        let xg = this._Gradients2D[index1];\n                        let yg = this._Gradients2D[index1 | 1];\n                        let value = x1 * xg + y1 * yg;\n                        let xgo = this._RandVecs2D[index2];\n                        let ygo = this._RandVecs2D[index2 | 1];\n                        xo = value * xgo;\n                        yo = value * ygo;\n                    }\n                    vx += bbbb * xo;\n                    vy += bbbb * yo;\n                }\n            }\n\n            coord.x += vx * warpAmp;\n            coord.y += vy * warpAmp;\n        };\n\n        /**\n         *\n         * @param {number} seed\n         * @param {number} warpAmp\n         * @param {number} frequency\n         * @param {Vector3} coord\n         * @param {boolean} outGradOnly\n         * @param {number} x\n         * @param {number} y\n         * @param {number} z\n         */\n        let R3 = (seed, warpAmp, frequency, coord, outGradOnly, x, y, z) => {\n            x *= frequency;\n            y *= frequency;\n            z *= frequency;\n\n            let i = Math.round(x);\n            let j = Math.round(y);\n            let k = Math.round(z);\n            let x0 = x - i;\n            let y0 = y - j;\n            let z0 = z - k;\n\n            let xNSign = (-x0 - 1.0) | 1;\n            let yNSign = (-y0 - 1.0) | 1;\n            let zNSign = (-z0 - 1.0) | 1;\n\n            let ax0 = xNSign * -x0;\n            let ay0 = yNSign * -y0;\n            let az0 = zNSign * -z0;\n\n            i = Math.imul(i, this._PrimeX);\n            j = Math.imul(j, this._PrimeY);\n            k = Math.imul(k, this._PrimeZ);\n\n            let vx, vy, vz;\n            vx = vy = vz = 0;\n\n            let a = 0.6 - x0 * x0 - (y0 * y0 + z0 * z0);\n            for (let l = 0; ; l++) {\n                if (a > 0) {\n                    let aaaa = a * a * (a * a);\n                    let xo, yo, zo;\n                    if (outGradOnly) {\n                        let hash = this._HashR3(seed, i, j, k) & (255 << 2);\n                        xo = this._RandVecs3D[hash];\n                        yo = this._RandVecs3D[hash | 1];\n                        zo = this._RandVecs3D[hash | 2];\n                    } else {\n                        let hash = this._HashR3(seed, i, j, k);\n                        let index1 = hash & (63 << 2);\n                        let index2 = (hash >> 6) & (255 << 2);\n                        let xg = this._Gradients3D[index1];\n                        let yg = this._Gradients3D[index1 | 1];\n                        let zg = this._Gradients3D[index1 | 2];\n                        let value = x0 * xg + y0 * yg + z0 * zg;\n                        let xgo = this._RandVecs3D[index2];\n                        let ygo = this._RandVecs3D[index2 | 1];\n                        let zgo = this._RandVecs3D[index2 | 2];\n                        xo = value * xgo;\n                        yo = value * ygo;\n                        zo = value * zgo;\n                    }\n                    vx += aaaa * xo;\n                    vy += aaaa * yo;\n                    vz += aaaa * zo;\n                }\n\n                let b = a;\n                let i1 = i;\n                let j1 = j;\n                let k1 = k;\n                let x1 = x0;\n                let y1 = y0;\n                let z1 = z0;\n\n                if (ax0 >= ay0 && ax0 >= az0) {\n                    x1 += xNSign;\n                    b = b + ax0 + ax0;\n                    i1 -= xNSign * this._PrimeX;\n                } else if (ay0 > ax0 && ay0 >= az0) {\n                    y1 += yNSign;\n                    b = b + ay0 + ay0;\n                    j1 -= yNSign * this._PrimeY;\n                } else {\n                    z1 += zNSign;\n                    b = b + az0 + az0;\n                    k1 -= zNSign * this._PrimeZ;\n                }\n\n                if (b > 1) {\n                    b -= 1;\n                    let bbbb = b * b * (b * b);\n                    let xo, yo, zo;\n                    if (outGradOnly) {\n                        let hash = this._HashR3(seed, i1, j1, k1) & (255 << 2);\n                        xo = this._RandVecs3D[hash];\n                        yo = this._RandVecs3D[hash | 1];\n                        zo = this._RandVecs3D[hash | 2];\n                    } else {\n                        let hash = this._HashR3(seed, i1, j1, k1);\n                        let index1 = hash & (63 << 2);\n                        let index2 = (hash >> 6) & (255 << 2);\n                        let xg = this._Gradients3D[index1];\n                        let yg = this._Gradients3D[index1 | 1];\n                        let zg = this._Gradients3D[index1 | 2];\n                        let value = x1 * xg + y1 * yg + z1 * zg;\n                        let xgo = this._RandVecs3D[index2];\n                        let ygo = this._RandVecs3D[index2 | 1];\n                        let zgo = this._RandVecs3D[index2 | 2];\n                        xo = value * xgo;\n                        yo = value * ygo;\n                        zo = value * zgo;\n                    }\n                    vx += bbbb * xo;\n                    vy += bbbb * yo;\n                    vz += bbbb * zo;\n                }\n\n                if (l === 1) break;\n\n                ax0 = 0.5 - ax0;\n                ay0 = 0.5 - ay0;\n                az0 = 0.5 - az0;\n\n                x0 = xNSign * ax0;\n                y0 = yNSign * ay0;\n                z0 = zNSign * az0;\n\n                a += 0.75 - ax0 - (ay0 + az0);\n\n                i += (xNSign >> 1) & this._PrimeX;\n                j += (yNSign >> 1) & this._PrimeY;\n                k += (zNSign >> 1) & this._PrimeZ;\n\n                xNSign = -xNSign;\n                yNSign = -yNSign;\n                zNSign = -zNSign;\n\n                seed += 1293373;\n            }\n\n            coord.x += vx * warpAmp;\n            coord.y += vy * warpAmp;\n            coord.z += vz * warpAmp;\n        };\n\n        if (arguments.length === 7) {\n            R2(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                arguments[4],\n                arguments[5],\n                arguments[6]\n            );\n        }\n\n        if (arguments.length === 8) {\n            R3(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                arguments[4],\n                arguments[5],\n                arguments[6],\n                arguments[7]\n            );\n        }\n    }\n}\n\nclass Vector2 {\n    /**\n     * 2d Vector\n     * @param {number} x\n     * @param {number} y\n     */\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass Vector3 {\n    /**\n     * 3d Vector\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n"],
  "mappings": ";;;;;AAqFA,IAAqB,iBAArB,MAAqB,eAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuH/B,YAAY,MAAM;AA5BlB;AAAA,iCAAQ;AACR,sCAAa;AACb,sCAAa,eAAc,UAAU;AACrC,2CAAkB,eAAc,eAAe;AAC/C,4CAAmB,eAAc,gBAAgB;AACjD,0CAAiB;AAEjB,wCAAe,eAAc,YAAY;AACzC,oCAAW;AACX,uCAAc;AACd,iCAAQ;AACR,6CAAoB;AACpB,6CAAoB;AAEpB,4CAAmB,IAAI;AAEvB,qDAA4B,eAAc,yBAAyB;AACnE,+CAAsB,eAAc,mBAAmB;AACvD,mDAA0B;AAE1B,2CAAkB,eAAc,eAAe;AAC/C,gDAAuB,eAAc,gBAAgB;AAuSrD;AAAA,wCAAe;AAAA,MACX;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACtI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAC1I;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACtI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAC1I;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACtI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAC1I;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MACxI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAkB;AAAA,MAAmB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACnI;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAkB;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACtI;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAAoB;AAAA,MAC1I;AAAA,MAAoB;AAAA,MAAmB;AAAA,MAAmB;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,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,IAC7N;AAGA;AAAA,wCAAe;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACjD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAA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;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAc;AAAA,MAAc;AAAA,MAAG;AAAA,MAAgB;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MACvX;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAe;AAAA,MAAc;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAc;AAAA,MAAc;AAAA,MAAG;AAAA,MAAe;AAAA,MAAc;AAAA,MAAa;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAc;AAAA,MAAc;AAAA,MAChX;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAa;AAAA,MAAe;AAAA,MAAc;AAAA,MAAG;AAAA,MAAc;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAe;AAAA,MAAgB;AAAA,MAAG;AAAA,MAAc;AAAA,MAAe;AAAA,MAAc;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAe;AAAA,MACpX;AAAA,MAAe;AAAA,MAAc;AAAA,MAAc;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAe;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAa;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA,MAAc;AAAA,MAAG;AAAA,MAAa;AAAA,MAAc;AAAA,MAAc;AAAA,MAAG;AAAA,MAAe;AAAA,MAAe;AAAA,MAAc;AAAA,MAAG;AAAA,MAAc;AAAA,MAAc;AAAA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",
  "names": ["x", "y", "z", "R3"]
}
